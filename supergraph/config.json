{"engineConfig":{"defaultFlushInterval":"500","datasourceConfigurations":[{"kind":"GRAPHQL","rootNodes":[{"typeName":"Artist","fieldNames":["artistId","name","albums","albums_aggregate"]},{"typeName":"Genre","fieldNames":["genreId","name","tracks","tracks_aggregate"]},{"typeName":"Employee","fieldNames":["employeeId","lastName","firstName","title","employee","employee_aggregate","birthDate","hireDate","address","city","state","country","postalCode","phone","fax","email","customers","customers_aggregate","employees","employees_aggregate"]},{"typeName":"Customer","fieldNames":["customerId","firstName","lastName","company","address","city","state","country","postalCode","phone","fax","email","employee","employee_aggregate","invoices","invoices_aggregate"]},{"typeName":"Invoice","fieldNames":["invoiceId","customer","customer_aggregate","invoiceDate","billingAddress","billingCity","billingState","billingCountry","billingPostalCode","total","invoiceLines","invoiceLines_aggregate"]},{"typeName":"InvoiceLine","fieldNames":["invoiceLineId","invoice","invoice_aggregate","track","track_aggregate","unitPrice","quantity"]},{"typeName":"MediaType","fieldNames":["mediaTypeId","name","tracks","tracks_aggregate"]},{"typeName":"Playlist","fieldNames":["playlistId","name","tracks","tracks_aggregate"]},{"typeName":"Track","fieldNames":["trackId","name","album","album_aggregate","mediaType","mediaType_aggregate","genre","genre_aggregate","composer","milliseconds","bytes","unitPrice","invoiceLines","invoiceLines_aggregate","playlists","playlists_aggregate"]},{"typeName":"Album","fieldNames":["albumId","title","artist","artist_aggregate","tracks","tracks_aggregate"]},{"typeName":"Query","fieldNames":["artist","artists","artists_aggregate","genre","genres","genres_aggregate","employee","employees","employees_aggregate","customer","customers","customers_aggregate","invoice","invoices","invoices_aggregate","invoiceLine","invoiceLines","invoiceLines_aggregate","mediaType","mediaTypes","mediaTypes_aggregate","playlist","playlists","playlists_aggregate","track","tracks","tracks_aggregate","album","albums","albums_aggregate"]},{"typeName":"Mutation","fieldNames":["createArtist","createArtists","updateArtist","updateArtists","createOrUpdateArtists","deleteArtist","deleteArtists","createGenre","createGenres","updateGenre","updateGenres","createOrUpdateGenres","deleteGenre","deleteGenres","createEmployee","createEmployees","updateEmployee","updateEmployees","createOrUpdateEmployees","deleteEmployee","deleteEmployees","createCustomer","createCustomers","updateCustomer","updateCustomers","createOrUpdateCustomers","deleteCustomer","deleteCustomers","createInvoice","createInvoices","updateInvoice","updateInvoices","createOrUpdateInvoices","deleteInvoice","deleteInvoices","createInvoiceLine","createInvoiceLines","updateInvoiceLine","updateInvoiceLines","createOrUpdateInvoiceLines","deleteInvoiceLine","deleteInvoiceLines","createMediaType","createMediaTypes","updateMediaType","updateMediaTypes","createOrUpdateMediaTypes","deleteMediaType","deleteMediaTypes","createPlaylist","createPlaylists","updatePlaylist","updatePlaylists","createOrUpdatePlaylists","deletePlaylist","deletePlaylists","createTrack","createTracks","updateTrack","updateTracks","createOrUpdateTracks","deleteTrack","deleteTracks","createAlbum","createAlbums","updateAlbum","updateAlbums","createOrUpdateAlbums","deleteAlbum","deleteAlbums"]}],"childNodes":[{"typeName":"AggregationResultFromMusicSubgraph","fieldNames":["count"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://localhost:9001"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://localhost:9001"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS","websocketSubprotocol":"GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"},"federation":{"enabled":true,"serviceSdl":"schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@extends\", \"@external\", \"@inaccessible\", \"@interfaceObject\", \"@key\", \"@override\", \"@provides\", \"@requires\", \"@shareable\", \"@tag\"]) {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @link(url: String!, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE\n\ndirective @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION\n\ndirective @shareable on OBJECT | FIELD_DEFINITION\n\ndirective @external on FIELD_DEFINITION\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @inaccessible on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ntype Artist @key(fields: \"artistId\") {\n  artistId: ID!\n  name: String\n  albums(filter: AlbumsListFilter): [Album!]!\n  albums_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput ArtistsListFilter {\n  artistId: ID\n  artistId_in: [ID!]\n  artistId_nin: [ID!]\n  artistId_ne: ID\n  artistId_notnull: Boolean\n  artistId_null: Boolean\n  artistId_gt: ID\n  artistId_gte: ID\n  artistId_lt: ID\n  artistId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  albums: AlbumsListFilter\n}\n\n\"\"\"Data needed to create Artists.\"\"\"\ninput ArtistInsertInput {\n  name: String\n  albums: [AlbumCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Artists. An ID must be passed.\"\"\"\ninput ArtistUpdateInput {\n  artistId: ID!\n  name: String\n  albums: [AlbumCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Artists. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput ArtistCreateOrUpdateInput {\n  artistId: ID\n  name: String\n  albums: [AlbumCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Artists.\"\"\"\ninput ArtistsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: ArtistsOrderByInput\n}\n\ninput ArtistsOrderByInput {\n  artistId: Sort\n  name: Sort\n}\n\ntype Genre @key(fields: \"genreId\") {\n  genreId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput GenresListFilter {\n  genreId: ID\n  genreId_in: [ID!]\n  genreId_nin: [ID!]\n  genreId_ne: ID\n  genreId_notnull: Boolean\n  genreId_null: Boolean\n  genreId_gt: ID\n  genreId_gte: ID\n  genreId_lt: ID\n  genreId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create Genres.\"\"\"\ninput GenreInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Genres. An ID must be passed.\"\"\"\ninput GenreUpdateInput {\n  genreId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Genres. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput GenreCreateOrUpdateInput {\n  genreId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Genres.\"\"\"\ninput GenresPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: GenresOrderByInput\n}\n\ninput GenresOrderByInput {\n  genreId: Sort\n  name: Sort\n}\n\ntype Employee @key(fields: \"employeeId\") {\n  employeeId: ID!\n  lastName: String!\n  firstName: String!\n  title: String\n  employee(filter: EmployeesListFilter): Employee\n  employee_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers(filter: CustomersListFilter): [Customer!]!\n  customers_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  employees(filter: EmployeesListFilter): [Employee!]!\n  employees_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n}\n\n\"\"\"\nReturns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".\n\"\"\"\nscalar ISOString\n\ninput EmployeesListFilter {\n  employeeId: ID\n  employeeId_in: [ID!]\n  employeeId_nin: [ID!]\n  employeeId_ne: ID\n  employeeId_notnull: Boolean\n  employeeId_null: Boolean\n  employeeId_gt: ID\n  employeeId_gte: ID\n  employeeId_lt: ID\n  employeeId_lte: ID\n  lastName: String\n  lastName_in: [String!]\n  lastName_nin: [String!]\n  lastName_ne: String\n  lastName_notnull: Boolean\n  lastName_null: Boolean\n  lastName_like: String\n  lastName_ilike: String\n  lastName_gt: String\n  lastName_gte: String\n  lastName_lt: String\n  lastName_lte: String\n  firstName: String\n  firstName_in: [String!]\n  firstName_nin: [String!]\n  firstName_ne: String\n  firstName_notnull: Boolean\n  firstName_null: Boolean\n  firstName_like: String\n  firstName_ilike: String\n  firstName_gt: String\n  firstName_gte: String\n  firstName_lt: String\n  firstName_lte: String\n  title: String\n  title_in: [String!]\n  title_nin: [String!]\n  title_ne: String\n  title_notnull: Boolean\n  title_null: Boolean\n  title_like: String\n  title_ilike: String\n  title_gt: String\n  title_gte: String\n  title_lt: String\n  title_lte: String\n  employee: EmployeesListFilter\n  birthDate: ISOString\n  birthDate_in: [ISOString!]\n  birthDate_nin: [ISOString!]\n  birthDate_ne: ISOString\n  birthDate_notnull: Boolean\n  birthDate_null: Boolean\n  birthDate_gt: ISOString\n  birthDate_gte: ISOString\n  birthDate_lt: ISOString\n  birthDate_lte: ISOString\n  hireDate: ISOString\n  hireDate_in: [ISOString!]\n  hireDate_nin: [ISOString!]\n  hireDate_ne: ISOString\n  hireDate_notnull: Boolean\n  hireDate_null: Boolean\n  hireDate_gt: ISOString\n  hireDate_gte: ISOString\n  hireDate_lt: ISOString\n  hireDate_lte: ISOString\n  address: String\n  address_in: [String!]\n  address_nin: [String!]\n  address_ne: String\n  address_notnull: Boolean\n  address_null: Boolean\n  address_like: String\n  address_ilike: String\n  address_gt: String\n  address_gte: String\n  address_lt: String\n  address_lte: String\n  city: String\n  city_in: [String!]\n  city_nin: [String!]\n  city_ne: String\n  city_notnull: Boolean\n  city_null: Boolean\n  city_like: String\n  city_ilike: String\n  city_gt: String\n  city_gte: String\n  city_lt: String\n  city_lte: String\n  state: String\n  state_in: [String!]\n  state_nin: [String!]\n  state_ne: String\n  state_notnull: Boolean\n  state_null: Boolean\n  state_like: String\n  state_ilike: String\n  state_gt: String\n  state_gte: String\n  state_lt: String\n  state_lte: String\n  country: String\n  country_in: [String!]\n  country_nin: [String!]\n  country_ne: String\n  country_notnull: Boolean\n  country_null: Boolean\n  country_like: String\n  country_ilike: String\n  country_gt: String\n  country_gte: String\n  country_lt: String\n  country_lte: String\n  postalCode: String\n  postalCode_in: [String!]\n  postalCode_nin: [String!]\n  postalCode_ne: String\n  postalCode_notnull: Boolean\n  postalCode_null: Boolean\n  postalCode_like: String\n  postalCode_ilike: String\n  postalCode_gt: String\n  postalCode_gte: String\n  postalCode_lt: String\n  postalCode_lte: String\n  phone: String\n  phone_in: [String!]\n  phone_nin: [String!]\n  phone_ne: String\n  phone_notnull: Boolean\n  phone_null: Boolean\n  phone_like: String\n  phone_ilike: String\n  phone_gt: String\n  phone_gte: String\n  phone_lt: String\n  phone_lte: String\n  fax: String\n  fax_in: [String!]\n  fax_nin: [String!]\n  fax_ne: String\n  fax_notnull: Boolean\n  fax_null: Boolean\n  fax_like: String\n  fax_ilike: String\n  fax_gt: String\n  fax_gte: String\n  fax_lt: String\n  fax_lte: String\n  email: String\n  email_in: [String!]\n  email_nin: [String!]\n  email_ne: String\n  email_notnull: Boolean\n  email_null: Boolean\n  email_like: String\n  email_ilike: String\n  email_gt: String\n  email_gte: String\n  email_lt: String\n  email_lte: String\n  customers: CustomersListFilter\n  employees: EmployeesListFilter\n}\n\n\"\"\"Data needed to create Employees.\"\"\"\ninput EmployeeInsertInput {\n  lastName: String!\n  firstName: String!\n  title: String\n  employee: EmployeeCreateOrUpdateInput\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers: [CustomerCreateOrUpdateInput!]\n  employees: [EmployeeCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Employees. An ID must be passed.\"\"\"\ninput EmployeeUpdateInput {\n  employeeId: ID!\n  lastName: String\n  firstName: String\n  title: String\n  employee: EmployeeCreateOrUpdateInput\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers: [CustomerCreateOrUpdateInput!]\n  employees: [EmployeeCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Employees. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput EmployeeCreateOrUpdateInput {\n  employeeId: ID\n  lastName: String\n  firstName: String\n  title: String\n  employee: EmployeeCreateOrUpdateInput\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers: [CustomerCreateOrUpdateInput!]\n  employees: [EmployeeCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Employees.\"\"\"\ninput EmployeesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: EmployeesOrderByInput\n}\n\ninput EmployeesOrderByInput {\n  employeeId: Sort\n  lastName: Sort\n  firstName: Sort\n  title: Sort\n  birthDate: Sort\n  hireDate: Sort\n  address: Sort\n  city: Sort\n  state: Sort\n  country: Sort\n  postalCode: Sort\n  phone: Sort\n  fax: Sort\n  email: Sort\n}\n\ntype Customer @key(fields: \"customerId\") {\n  customerId: ID!\n  firstName: String!\n  lastName: String!\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String!\n  employee(filter: EmployeesListFilter): Employee\n  employee_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  invoices(filter: InvoicesListFilter): [Invoice!]!\n  invoices_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput CustomersListFilter {\n  customerId: ID\n  customerId_in: [ID!]\n  customerId_nin: [ID!]\n  customerId_ne: ID\n  customerId_notnull: Boolean\n  customerId_null: Boolean\n  customerId_gt: ID\n  customerId_gte: ID\n  customerId_lt: ID\n  customerId_lte: ID\n  firstName: String\n  firstName_in: [String!]\n  firstName_nin: [String!]\n  firstName_ne: String\n  firstName_notnull: Boolean\n  firstName_null: Boolean\n  firstName_like: String\n  firstName_ilike: String\n  firstName_gt: String\n  firstName_gte: String\n  firstName_lt: String\n  firstName_lte: String\n  lastName: String\n  lastName_in: [String!]\n  lastName_nin: [String!]\n  lastName_ne: String\n  lastName_notnull: Boolean\n  lastName_null: Boolean\n  lastName_like: String\n  lastName_ilike: String\n  lastName_gt: String\n  lastName_gte: String\n  lastName_lt: String\n  lastName_lte: String\n  company: String\n  company_in: [String!]\n  company_nin: [String!]\n  company_ne: String\n  company_notnull: Boolean\n  company_null: Boolean\n  company_like: String\n  company_ilike: String\n  company_gt: String\n  company_gte: String\n  company_lt: String\n  company_lte: String\n  address: String\n  address_in: [String!]\n  address_nin: [String!]\n  address_ne: String\n  address_notnull: Boolean\n  address_null: Boolean\n  address_like: String\n  address_ilike: String\n  address_gt: String\n  address_gte: String\n  address_lt: String\n  address_lte: String\n  city: String\n  city_in: [String!]\n  city_nin: [String!]\n  city_ne: String\n  city_notnull: Boolean\n  city_null: Boolean\n  city_like: String\n  city_ilike: String\n  city_gt: String\n  city_gte: String\n  city_lt: String\n  city_lte: String\n  state: String\n  state_in: [String!]\n  state_nin: [String!]\n  state_ne: String\n  state_notnull: Boolean\n  state_null: Boolean\n  state_like: String\n  state_ilike: String\n  state_gt: String\n  state_gte: String\n  state_lt: String\n  state_lte: String\n  country: String\n  country_in: [String!]\n  country_nin: [String!]\n  country_ne: String\n  country_notnull: Boolean\n  country_null: Boolean\n  country_like: String\n  country_ilike: String\n  country_gt: String\n  country_gte: String\n  country_lt: String\n  country_lte: String\n  postalCode: String\n  postalCode_in: [String!]\n  postalCode_nin: [String!]\n  postalCode_ne: String\n  postalCode_notnull: Boolean\n  postalCode_null: Boolean\n  postalCode_like: String\n  postalCode_ilike: String\n  postalCode_gt: String\n  postalCode_gte: String\n  postalCode_lt: String\n  postalCode_lte: String\n  phone: String\n  phone_in: [String!]\n  phone_nin: [String!]\n  phone_ne: String\n  phone_notnull: Boolean\n  phone_null: Boolean\n  phone_like: String\n  phone_ilike: String\n  phone_gt: String\n  phone_gte: String\n  phone_lt: String\n  phone_lte: String\n  fax: String\n  fax_in: [String!]\n  fax_nin: [String!]\n  fax_ne: String\n  fax_notnull: Boolean\n  fax_null: Boolean\n  fax_like: String\n  fax_ilike: String\n  fax_gt: String\n  fax_gte: String\n  fax_lt: String\n  fax_lte: String\n  email: String\n  email_in: [String!]\n  email_nin: [String!]\n  email_ne: String\n  email_notnull: Boolean\n  email_null: Boolean\n  email_like: String\n  email_ilike: String\n  email_gt: String\n  email_gte: String\n  email_lt: String\n  email_lte: String\n  employee: EmployeesListFilter\n  invoices: InvoicesListFilter\n}\n\n\"\"\"Data needed to create Customers.\"\"\"\ninput CustomerInsertInput {\n  firstName: String!\n  lastName: String!\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String!\n  employee: EmployeeCreateOrUpdateInput\n  invoices: [InvoiceCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Customers. An ID must be passed.\"\"\"\ninput CustomerUpdateInput {\n  customerId: ID!\n  firstName: String\n  lastName: String\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  invoices: [InvoiceCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Customers. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput CustomerCreateOrUpdateInput {\n  customerId: ID\n  firstName: String\n  lastName: String\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  invoices: [InvoiceCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Customers.\"\"\"\ninput CustomersPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: CustomersOrderByInput\n}\n\ninput CustomersOrderByInput {\n  customerId: Sort\n  firstName: Sort\n  lastName: Sort\n  company: Sort\n  address: Sort\n  city: Sort\n  state: Sort\n  country: Sort\n  postalCode: Sort\n  phone: Sort\n  fax: Sort\n  email: Sort\n}\n\ntype Invoice @key(fields: \"invoiceId\") {\n  invoiceId: ID!\n  customer(filter: CustomersListFilter): Customer!\n  customer_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  invoiceDate: ISOString!\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String!\n  invoiceLines(filter: InvoiceLinesListFilter): [InvoiceLine!]!\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput InvoicesListFilter {\n  invoiceId: ID\n  invoiceId_in: [ID!]\n  invoiceId_nin: [ID!]\n  invoiceId_ne: ID\n  invoiceId_notnull: Boolean\n  invoiceId_null: Boolean\n  invoiceId_gt: ID\n  invoiceId_gte: ID\n  invoiceId_lt: ID\n  invoiceId_lte: ID\n  customer: CustomersListFilter\n  invoiceDate: ISOString\n  invoiceDate_in: [ISOString!]\n  invoiceDate_nin: [ISOString!]\n  invoiceDate_ne: ISOString\n  invoiceDate_notnull: Boolean\n  invoiceDate_null: Boolean\n  invoiceDate_gt: ISOString\n  invoiceDate_gte: ISOString\n  invoiceDate_lt: ISOString\n  invoiceDate_lte: ISOString\n  billingAddress: String\n  billingAddress_in: [String!]\n  billingAddress_nin: [String!]\n  billingAddress_ne: String\n  billingAddress_notnull: Boolean\n  billingAddress_null: Boolean\n  billingAddress_like: String\n  billingAddress_ilike: String\n  billingAddress_gt: String\n  billingAddress_gte: String\n  billingAddress_lt: String\n  billingAddress_lte: String\n  billingCity: String\n  billingCity_in: [String!]\n  billingCity_nin: [String!]\n  billingCity_ne: String\n  billingCity_notnull: Boolean\n  billingCity_null: Boolean\n  billingCity_like: String\n  billingCity_ilike: String\n  billingCity_gt: String\n  billingCity_gte: String\n  billingCity_lt: String\n  billingCity_lte: String\n  billingState: String\n  billingState_in: [String!]\n  billingState_nin: [String!]\n  billingState_ne: String\n  billingState_notnull: Boolean\n  billingState_null: Boolean\n  billingState_like: String\n  billingState_ilike: String\n  billingState_gt: String\n  billingState_gte: String\n  billingState_lt: String\n  billingState_lte: String\n  billingCountry: String\n  billingCountry_in: [String!]\n  billingCountry_nin: [String!]\n  billingCountry_ne: String\n  billingCountry_notnull: Boolean\n  billingCountry_null: Boolean\n  billingCountry_like: String\n  billingCountry_ilike: String\n  billingCountry_gt: String\n  billingCountry_gte: String\n  billingCountry_lt: String\n  billingCountry_lte: String\n  billingPostalCode: String\n  billingPostalCode_in: [String!]\n  billingPostalCode_nin: [String!]\n  billingPostalCode_ne: String\n  billingPostalCode_notnull: Boolean\n  billingPostalCode_null: Boolean\n  billingPostalCode_like: String\n  billingPostalCode_ilike: String\n  billingPostalCode_gt: String\n  billingPostalCode_gte: String\n  billingPostalCode_lt: String\n  billingPostalCode_lte: String\n  total: String\n  total_in: [String!]\n  total_nin: [String!]\n  total_ne: String\n  total_notnull: Boolean\n  total_null: Boolean\n  total_like: String\n  total_ilike: String\n  total_gt: String\n  total_gte: String\n  total_lt: String\n  total_lte: String\n  invoiceLines: InvoiceLinesListFilter\n}\n\n\"\"\"Data needed to create Invoices.\"\"\"\ninput InvoiceInsertInput {\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString!\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String!\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Invoices. An ID must be passed.\"\"\"\ninput InvoiceUpdateInput {\n  invoiceId: ID!\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Invoices. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput InvoiceCreateOrUpdateInput {\n  invoiceId: ID\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Invoices.\"\"\"\ninput InvoicesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: InvoicesOrderByInput\n}\n\ninput InvoicesOrderByInput {\n  invoiceId: Sort\n  invoiceDate: Sort\n  billingAddress: Sort\n  billingCity: Sort\n  billingState: Sort\n  billingCountry: Sort\n  billingPostalCode: Sort\n  total: Sort\n}\n\ntype InvoiceLine @key(fields: \"invoiceLineId\") {\n  invoiceLineId: ID!\n  invoice(filter: InvoicesListFilter): Invoice!\n  invoice_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  track(filter: TracksListFilter): Track!\n  track_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n  unitPrice: String!\n  quantity: Float!\n}\n\ninput InvoiceLinesListFilter {\n  invoiceLineId: ID\n  invoiceLineId_in: [ID!]\n  invoiceLineId_nin: [ID!]\n  invoiceLineId_ne: ID\n  invoiceLineId_notnull: Boolean\n  invoiceLineId_null: Boolean\n  invoiceLineId_gt: ID\n  invoiceLineId_gte: ID\n  invoiceLineId_lt: ID\n  invoiceLineId_lte: ID\n  invoice: InvoicesListFilter\n  track: TracksListFilter\n  unitPrice: String\n  unitPrice_in: [String!]\n  unitPrice_nin: [String!]\n  unitPrice_ne: String\n  unitPrice_notnull: Boolean\n  unitPrice_null: Boolean\n  unitPrice_like: String\n  unitPrice_ilike: String\n  unitPrice_gt: String\n  unitPrice_gte: String\n  unitPrice_lt: String\n  unitPrice_lte: String\n  quantity: Float\n  quantity_in: [Float!]\n  quantity_nin: [Float!]\n  quantity_ne: Float\n  quantity_notnull: Boolean\n  quantity_null: Boolean\n}\n\n\"\"\"Data needed to create InvoiceLines.\"\"\"\ninput InvoiceLineInsertInput {\n  invoice: InvoiceCreateOrUpdateInput\n  track: TrackCreateOrUpdateInput\n  unitPrice: String!\n  quantity: Float!\n}\n\n\"\"\"Data needed to update InvoiceLines. An ID must be passed.\"\"\"\ninput InvoiceLineUpdateInput {\n  invoiceLineId: ID!\n  invoice: InvoiceCreateOrUpdateInput\n  track: TrackCreateOrUpdateInput\n  unitPrice: String\n  quantity: Float\n}\n\n\"\"\"\nData needed to create or update InvoiceLines. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput InvoiceLineCreateOrUpdateInput {\n  invoiceLineId: ID\n  invoice: InvoiceCreateOrUpdateInput\n  track: TrackCreateOrUpdateInput\n  unitPrice: String\n  quantity: Float\n}\n\n\"\"\"Pagination options for InvoiceLines.\"\"\"\ninput InvoiceLinesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: InvoiceLinesOrderByInput\n}\n\ninput InvoiceLinesOrderByInput {\n  invoiceLineId: Sort\n  unitPrice: Sort\n  quantity: Sort\n}\n\ntype MediaType @key(fields: \"mediaTypeId\") {\n  mediaTypeId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput MediaTypesListFilter {\n  mediaTypeId: ID\n  mediaTypeId_in: [ID!]\n  mediaTypeId_nin: [ID!]\n  mediaTypeId_ne: ID\n  mediaTypeId_notnull: Boolean\n  mediaTypeId_null: Boolean\n  mediaTypeId_gt: ID\n  mediaTypeId_gte: ID\n  mediaTypeId_lt: ID\n  mediaTypeId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create MediaTypes.\"\"\"\ninput MediaTypeInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update MediaTypes. An ID must be passed.\"\"\"\ninput MediaTypeUpdateInput {\n  mediaTypeId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update MediaTypes. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput MediaTypeCreateOrUpdateInput {\n  mediaTypeId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for MediaTypes.\"\"\"\ninput MediaTypesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: MediaTypesOrderByInput\n}\n\ninput MediaTypesOrderByInput {\n  mediaTypeId: Sort\n  name: Sort\n}\n\ntype Playlist @key(fields: \"playlistId\") {\n  playlistId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput PlaylistsListFilter {\n  playlistId: ID\n  playlistId_in: [ID!]\n  playlistId_nin: [ID!]\n  playlistId_ne: ID\n  playlistId_notnull: Boolean\n  playlistId_null: Boolean\n  playlistId_gt: ID\n  playlistId_gte: ID\n  playlistId_lt: ID\n  playlistId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create Playlists.\"\"\"\ninput PlaylistInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Playlists. An ID must be passed.\"\"\"\ninput PlaylistUpdateInput {\n  playlistId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Playlists. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput PlaylistCreateOrUpdateInput {\n  playlistId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Playlists.\"\"\"\ninput PlaylistsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: PlaylistsOrderByInput\n}\n\ninput PlaylistsOrderByInput {\n  playlistId: Sort\n  name: Sort\n}\n\ntype Track @key(fields: \"trackId\") {\n  trackId: ID!\n  name: String!\n  album(filter: AlbumsListFilter): Album\n  album_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  mediaType(filter: MediaTypesListFilter): MediaType!\n  mediaType_aggregate(filter: MediaTypesListFilter): AggregationResultFromMusicSubgraph\n  genre(filter: GenresListFilter): Genre\n  genre_aggregate(filter: GenresListFilter): AggregationResultFromMusicSubgraph\n  composer: String\n  milliseconds: Float!\n  bytes: Float\n  unitPrice: String!\n  invoiceLines(filter: InvoiceLinesListFilter): [InvoiceLine!]!\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  playlists(filter: PlaylistsListFilter): [Playlist!]!\n  playlists_aggregate(filter: PlaylistsListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput TracksListFilter {\n  trackId: ID\n  trackId_in: [ID!]\n  trackId_nin: [ID!]\n  trackId_ne: ID\n  trackId_notnull: Boolean\n  trackId_null: Boolean\n  trackId_gt: ID\n  trackId_gte: ID\n  trackId_lt: ID\n  trackId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  album: AlbumsListFilter\n  mediaType: MediaTypesListFilter\n  genre: GenresListFilter\n  composer: String\n  composer_in: [String!]\n  composer_nin: [String!]\n  composer_ne: String\n  composer_notnull: Boolean\n  composer_null: Boolean\n  composer_like: String\n  composer_ilike: String\n  composer_gt: String\n  composer_gte: String\n  composer_lt: String\n  composer_lte: String\n  milliseconds: Float\n  milliseconds_in: [Float!]\n  milliseconds_nin: [Float!]\n  milliseconds_ne: Float\n  milliseconds_notnull: Boolean\n  milliseconds_null: Boolean\n  bytes: Float\n  bytes_in: [Float!]\n  bytes_nin: [Float!]\n  bytes_ne: Float\n  bytes_notnull: Boolean\n  bytes_null: Boolean\n  unitPrice: String\n  unitPrice_in: [String!]\n  unitPrice_nin: [String!]\n  unitPrice_ne: String\n  unitPrice_notnull: Boolean\n  unitPrice_null: Boolean\n  unitPrice_like: String\n  unitPrice_ilike: String\n  unitPrice_gt: String\n  unitPrice_gte: String\n  unitPrice_lt: String\n  unitPrice_lte: String\n  invoiceLines: InvoiceLinesListFilter\n  playlists: PlaylistsListFilter\n}\n\n\"\"\"Data needed to create Tracks.\"\"\"\ninput TrackInsertInput {\n  name: String!\n  album: AlbumCreateOrUpdateInput\n  mediaType: MediaTypeCreateOrUpdateInput\n  genre: GenreCreateOrUpdateInput\n  composer: String\n  milliseconds: Float!\n  bytes: Float\n  unitPrice: String!\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  playlists: [PlaylistCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Tracks. An ID must be passed.\"\"\"\ninput TrackUpdateInput {\n  trackId: ID!\n  name: String\n  album: AlbumCreateOrUpdateInput\n  mediaType: MediaTypeCreateOrUpdateInput\n  genre: GenreCreateOrUpdateInput\n  composer: String\n  milliseconds: Float\n  bytes: Float\n  unitPrice: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  playlists: [PlaylistCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Tracks. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput TrackCreateOrUpdateInput {\n  trackId: ID\n  name: String\n  album: AlbumCreateOrUpdateInput\n  mediaType: MediaTypeCreateOrUpdateInput\n  genre: GenreCreateOrUpdateInput\n  composer: String\n  milliseconds: Float\n  bytes: Float\n  unitPrice: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  playlists: [PlaylistCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Tracks.\"\"\"\ninput TracksPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: TracksOrderByInput\n}\n\ninput TracksOrderByInput {\n  trackId: Sort\n  name: Sort\n  composer: Sort\n  milliseconds: Sort\n  bytes: Sort\n  unitPrice: Sort\n}\n\ntype Album @key(fields: \"albumId\") {\n  albumId: ID!\n  title: String!\n  artist(filter: ArtistsListFilter): Artist!\n  artist_aggregate(filter: ArtistsListFilter): AggregationResultFromMusicSubgraph\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput AlbumsListFilter {\n  albumId: ID\n  albumId_in: [ID!]\n  albumId_nin: [ID!]\n  albumId_ne: ID\n  albumId_notnull: Boolean\n  albumId_null: Boolean\n  albumId_gt: ID\n  albumId_gte: ID\n  albumId_lt: ID\n  albumId_lte: ID\n  title: String\n  title_in: [String!]\n  title_nin: [String!]\n  title_ne: String\n  title_notnull: Boolean\n  title_null: Boolean\n  title_like: String\n  title_ilike: String\n  title_gt: String\n  title_gte: String\n  title_lt: String\n  title_lte: String\n  artist: ArtistsListFilter\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create Albums.\"\"\"\ninput AlbumInsertInput {\n  title: String!\n  artist: ArtistCreateOrUpdateInput\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Albums. An ID must be passed.\"\"\"\ninput AlbumUpdateInput {\n  albumId: ID!\n  title: String\n  artist: ArtistCreateOrUpdateInput\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Albums. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput AlbumCreateOrUpdateInput {\n  albumId: ID\n  title: String\n  artist: ArtistCreateOrUpdateInput\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Albums.\"\"\"\ninput AlbumsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: AlbumsOrderByInput\n}\n\ninput AlbumsOrderByInput {\n  albumId: Sort\n  title: Sort\n}\n\ntype _Service {\n  sdl: String!\n}\n\nenum Sort {\n  ASC\n  DESC\n}\n\nenum AdminUiFilterType {\n  DATE_RANGE\n  ENUM\n  NUMERIC\n  RELATIONSHIP\n  TEXT\n  BOOLEAN\n}\n\nenum AggregationType {\n  COUNT\n}\n\nenum link__Purpose {\n  SECURITY\n  EXECUTION\n}\n\ntype AggregationResultFromMusicSubgraph {\n  count: Int!\n}\n\ninput DeleteOneFilterInput {\n  id: ID!\n}\n\ntype Query {\n  \"\"\"Get a single Artist.\"\"\"\n  artist(id: ID!): Artist\n  \"\"\"Get multiple Artists.\"\"\"\n  artists(filter: ArtistsListFilter, pagination: ArtistsPaginationInput): [Artist]\n  \"\"\"Get aggregated data for Artists.\"\"\"\n  artists_aggregate(filter: ArtistsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Genre.\"\"\"\n  genre(id: ID!): Genre\n  \"\"\"Get multiple Genres.\"\"\"\n  genres(filter: GenresListFilter, pagination: GenresPaginationInput): [Genre]\n  \"\"\"Get aggregated data for Genres.\"\"\"\n  genres_aggregate(filter: GenresListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Employee.\"\"\"\n  employee(id: ID!): Employee\n  \"\"\"Get multiple Employees.\"\"\"\n  employees(filter: EmployeesListFilter, pagination: EmployeesPaginationInput): [Employee]\n  \"\"\"Get aggregated data for Employees.\"\"\"\n  employees_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Customer.\"\"\"\n  customer(id: ID!): Customer\n  \"\"\"Get multiple Customers.\"\"\"\n  customers(filter: CustomersListFilter, pagination: CustomersPaginationInput): [Customer]\n  \"\"\"Get aggregated data for Customers.\"\"\"\n  customers_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Invoice.\"\"\"\n  invoice(id: ID!): Invoice\n  \"\"\"Get multiple Invoices.\"\"\"\n  invoices(filter: InvoicesListFilter, pagination: InvoicesPaginationInput): [Invoice]\n  \"\"\"Get aggregated data for Invoices.\"\"\"\n  invoices_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single InvoiceLine.\"\"\"\n  invoiceLine(id: ID!): InvoiceLine\n  \"\"\"Get multiple InvoiceLines.\"\"\"\n  invoiceLines(filter: InvoiceLinesListFilter, pagination: InvoiceLinesPaginationInput): [InvoiceLine]\n  \"\"\"Get aggregated data for InvoiceLines.\"\"\"\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single MediaType.\"\"\"\n  mediaType(id: ID!): MediaType\n  \"\"\"Get multiple MediaTypes.\"\"\"\n  mediaTypes(filter: MediaTypesListFilter, pagination: MediaTypesPaginationInput): [MediaType]\n  \"\"\"Get aggregated data for MediaTypes.\"\"\"\n  mediaTypes_aggregate(filter: MediaTypesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Playlist.\"\"\"\n  playlist(id: ID!): Playlist\n  \"\"\"Get multiple Playlists.\"\"\"\n  playlists(filter: PlaylistsListFilter, pagination: PlaylistsPaginationInput): [Playlist]\n  \"\"\"Get aggregated data for Playlists.\"\"\"\n  playlists_aggregate(filter: PlaylistsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Track.\"\"\"\n  track(id: ID!): Track\n  \"\"\"Get multiple Tracks.\"\"\"\n  tracks(filter: TracksListFilter, pagination: TracksPaginationInput): [Track]\n  \"\"\"Get aggregated data for Tracks.\"\"\"\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Album.\"\"\"\n  album(id: ID!): Album\n  \"\"\"Get multiple Albums.\"\"\"\n  albums(filter: AlbumsListFilter, pagination: AlbumsPaginationInput): [Album]\n  \"\"\"Get aggregated data for Albums.\"\"\"\n  albums_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"\n  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied.\n  \"\"\"\n  _service: _Service\n  \"\"\"\n  Union of all types in this subgraph. This information is needed by the Apollo federation gateway.\n  \"\"\"\n  _entities(representations: [_Any!]): [_Entity]!\n}\n\nunion _Entity = Artist | Genre | Employee | Customer | Invoice | InvoiceLine | MediaType | Playlist | Track | Album\n\nscalar _Any\n\ntype Mutation {\n  \"\"\"Create a single Artist.\"\"\"\n  createArtist(input: ArtistInsertInput!): Artist\n  \"\"\"Create many Artists.\"\"\"\n  createArtists(input: [ArtistInsertInput!]!): [Artist]\n  \"\"\"Update a single Artist.\"\"\"\n  updateArtist(input: ArtistUpdateInput!): Artist\n  \"\"\"Update many Artists.\"\"\"\n  updateArtists(input: [ArtistUpdateInput!]!): [Artist]\n  \"\"\"Create or update many Artists.\"\"\"\n  createOrUpdateArtists(input: [ArtistCreateOrUpdateInput!]!): [Artist]\n  \"\"\"Delete a single Artist.\"\"\"\n  deleteArtist(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Artists with a filter.\"\"\"\n  deleteArtists(filter: ArtistsListFilter!): Boolean\n  \"\"\"Create a single Genre.\"\"\"\n  createGenre(input: GenreInsertInput!): Genre\n  \"\"\"Create many Genres.\"\"\"\n  createGenres(input: [GenreInsertInput!]!): [Genre]\n  \"\"\"Update a single Genre.\"\"\"\n  updateGenre(input: GenreUpdateInput!): Genre\n  \"\"\"Update many Genres.\"\"\"\n  updateGenres(input: [GenreUpdateInput!]!): [Genre]\n  \"\"\"Create or update many Genres.\"\"\"\n  createOrUpdateGenres(input: [GenreCreateOrUpdateInput!]!): [Genre]\n  \"\"\"Delete a single Genre.\"\"\"\n  deleteGenre(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Genres with a filter.\"\"\"\n  deleteGenres(filter: GenresListFilter!): Boolean\n  \"\"\"Create a single Employee.\"\"\"\n  createEmployee(input: EmployeeInsertInput!): Employee\n  \"\"\"Create many Employees.\"\"\"\n  createEmployees(input: [EmployeeInsertInput!]!): [Employee]\n  \"\"\"Update a single Employee.\"\"\"\n  updateEmployee(input: EmployeeUpdateInput!): Employee\n  \"\"\"Update many Employees.\"\"\"\n  updateEmployees(input: [EmployeeUpdateInput!]!): [Employee]\n  \"\"\"Create or update many Employees.\"\"\"\n  createOrUpdateEmployees(input: [EmployeeCreateOrUpdateInput!]!): [Employee]\n  \"\"\"Delete a single Employee.\"\"\"\n  deleteEmployee(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Employees with a filter.\"\"\"\n  deleteEmployees(filter: EmployeesListFilter!): Boolean\n  \"\"\"Create a single Customer.\"\"\"\n  createCustomer(input: CustomerInsertInput!): Customer\n  \"\"\"Create many Customers.\"\"\"\n  createCustomers(input: [CustomerInsertInput!]!): [Customer]\n  \"\"\"Update a single Customer.\"\"\"\n  updateCustomer(input: CustomerUpdateInput!): Customer\n  \"\"\"Update many Customers.\"\"\"\n  updateCustomers(input: [CustomerUpdateInput!]!): [Customer]\n  \"\"\"Create or update many Customers.\"\"\"\n  createOrUpdateCustomers(input: [CustomerCreateOrUpdateInput!]!): [Customer]\n  \"\"\"Delete a single Customer.\"\"\"\n  deleteCustomer(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Customers with a filter.\"\"\"\n  deleteCustomers(filter: CustomersListFilter!): Boolean\n  \"\"\"Create a single Invoice.\"\"\"\n  createInvoice(input: InvoiceInsertInput!): Invoice\n  \"\"\"Create many Invoices.\"\"\"\n  createInvoices(input: [InvoiceInsertInput!]!): [Invoice]\n  \"\"\"Update a single Invoice.\"\"\"\n  updateInvoice(input: InvoiceUpdateInput!): Invoice\n  \"\"\"Update many Invoices.\"\"\"\n  updateInvoices(input: [InvoiceUpdateInput!]!): [Invoice]\n  \"\"\"Create or update many Invoices.\"\"\"\n  createOrUpdateInvoices(input: [InvoiceCreateOrUpdateInput!]!): [Invoice]\n  \"\"\"Delete a single Invoice.\"\"\"\n  deleteInvoice(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Invoices with a filter.\"\"\"\n  deleteInvoices(filter: InvoicesListFilter!): Boolean\n  \"\"\"Create a single InvoiceLine.\"\"\"\n  createInvoiceLine(input: InvoiceLineInsertInput!): InvoiceLine\n  \"\"\"Create many InvoiceLines.\"\"\"\n  createInvoiceLines(input: [InvoiceLineInsertInput!]!): [InvoiceLine]\n  \"\"\"Update a single InvoiceLine.\"\"\"\n  updateInvoiceLine(input: InvoiceLineUpdateInput!): InvoiceLine\n  \"\"\"Update many InvoiceLines.\"\"\"\n  updateInvoiceLines(input: [InvoiceLineUpdateInput!]!): [InvoiceLine]\n  \"\"\"Create or update many InvoiceLines.\"\"\"\n  createOrUpdateInvoiceLines(input: [InvoiceLineCreateOrUpdateInput!]!): [InvoiceLine]\n  \"\"\"Delete a single InvoiceLine.\"\"\"\n  deleteInvoiceLine(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many InvoiceLines with a filter.\"\"\"\n  deleteInvoiceLines(filter: InvoiceLinesListFilter!): Boolean\n  \"\"\"Create a single MediaType.\"\"\"\n  createMediaType(input: MediaTypeInsertInput!): MediaType\n  \"\"\"Create many MediaTypes.\"\"\"\n  createMediaTypes(input: [MediaTypeInsertInput!]!): [MediaType]\n  \"\"\"Update a single MediaType.\"\"\"\n  updateMediaType(input: MediaTypeUpdateInput!): MediaType\n  \"\"\"Update many MediaTypes.\"\"\"\n  updateMediaTypes(input: [MediaTypeUpdateInput!]!): [MediaType]\n  \"\"\"Create or update many MediaTypes.\"\"\"\n  createOrUpdateMediaTypes(input: [MediaTypeCreateOrUpdateInput!]!): [MediaType]\n  \"\"\"Delete a single MediaType.\"\"\"\n  deleteMediaType(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many MediaTypes with a filter.\"\"\"\n  deleteMediaTypes(filter: MediaTypesListFilter!): Boolean\n  \"\"\"Create a single Playlist.\"\"\"\n  createPlaylist(input: PlaylistInsertInput!): Playlist\n  \"\"\"Create many Playlists.\"\"\"\n  createPlaylists(input: [PlaylistInsertInput!]!): [Playlist]\n  \"\"\"Update a single Playlist.\"\"\"\n  updatePlaylist(input: PlaylistUpdateInput!): Playlist\n  \"\"\"Update many Playlists.\"\"\"\n  updatePlaylists(input: [PlaylistUpdateInput!]!): [Playlist]\n  \"\"\"Create or update many Playlists.\"\"\"\n  createOrUpdatePlaylists(input: [PlaylistCreateOrUpdateInput!]!): [Playlist]\n  \"\"\"Delete a single Playlist.\"\"\"\n  deletePlaylist(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Playlists with a filter.\"\"\"\n  deletePlaylists(filter: PlaylistsListFilter!): Boolean\n  \"\"\"Create a single Track.\"\"\"\n  createTrack(input: TrackInsertInput!): Track\n  \"\"\"Create many Tracks.\"\"\"\n  createTracks(input: [TrackInsertInput!]!): [Track]\n  \"\"\"Update a single Track.\"\"\"\n  updateTrack(input: TrackUpdateInput!): Track\n  \"\"\"Update many Tracks.\"\"\"\n  updateTracks(input: [TrackUpdateInput!]!): [Track]\n  \"\"\"Create or update many Tracks.\"\"\"\n  createOrUpdateTracks(input: [TrackCreateOrUpdateInput!]!): [Track]\n  \"\"\"Delete a single Track.\"\"\"\n  deleteTrack(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Tracks with a filter.\"\"\"\n  deleteTracks(filter: TracksListFilter!): Boolean\n  \"\"\"Create a single Album.\"\"\"\n  createAlbum(input: AlbumInsertInput!): Album\n  \"\"\"Create many Albums.\"\"\"\n  createAlbums(input: [AlbumInsertInput!]!): [Album]\n  \"\"\"Update a single Album.\"\"\"\n  updateAlbum(input: AlbumUpdateInput!): Album\n  \"\"\"Update many Albums.\"\"\"\n  updateAlbums(input: [AlbumUpdateInput!]!): [Album]\n  \"\"\"Create or update many Albums.\"\"\"\n  createOrUpdateAlbums(input: [AlbumCreateOrUpdateInput!]!): [Album]\n  \"\"\"Delete a single Album.\"\"\"\n  deleteAlbum(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Albums with a filter.\"\"\"\n  deleteAlbums(filter: AlbumsListFilter!): Boolean\n}\n\nscalar link__Import\n\nscalar federation__FieldSet"},"upstreamSchema":{"key":"557ad44506cf4dcd4ac7eae835790c0bd0e58b4f"}},"requestTimeoutSeconds":"10","id":"0","keys":[{"typeName":"Artist","selectionSet":"artistId"},{"typeName":"Genre","selectionSet":"genreId"},{"typeName":"Employee","selectionSet":"employeeId"},{"typeName":"Customer","selectionSet":"customerId"},{"typeName":"Invoice","selectionSet":"invoiceId"},{"typeName":"InvoiceLine","selectionSet":"invoiceLineId"},{"typeName":"MediaType","selectionSet":"mediaTypeId"},{"typeName":"Playlist","selectionSet":"playlistId"},{"typeName":"Track","selectionSet":"trackId"},{"typeName":"Album","selectionSet":"albumId"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Agent","fieldNames":["id","name","birthYear","gender","height"]},{"typeName":"Invoice","fieldNames":["invoiceId"]},{"typeName":"Payment","fieldNames":["id","agentId","invoiceId","amount","reconciled","notes","paymentMethod","owner","invoice"]},{"typeName":"Trace","fieldNames":["id","spanId","parentId","name","timestamp","duration","traceId","attributes"]},{"typeName":"Query","fieldNames":["agent","agents","payment","payments","payments_aggregate","trace","traces","traces_aggregate"]},{"typeName":"Mutation","fieldNames":["createAgent","createAgents","updateAgent","updateAgents","createOrUpdateAgents","deleteAgent","deleteAgents","createPayment","createPayments","updatePayment","updatePayments","createOrUpdatePayments","deletePayment","deletePayments"]}],"childNodes":[{"typeName":"AggregationResultFromPaymentsSubgraph","fieldNames":["count"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://localhost:12346"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://localhost:12346"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS","websocketSubprotocol":"GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"},"federation":{"enabled":true,"serviceSdl":"schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@extends\", \"@external\", \"@inaccessible\", \"@interfaceObject\", \"@key\", \"@override\", \"@provides\", \"@requires\", \"@shareable\", \"@tag\"]) {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @link(url: String!, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE\n\ndirective @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION\n\ndirective @shareable on OBJECT | FIELD_DEFINITION\n\ndirective @external on FIELD_DEFINITION\n\ndirective @extends on OBJECT | INTERFACE\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @inaccessible on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ntype Agent @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  birthYear: String\n  gender: String\n  height: String\n}\n\ninput AgentsListFilter {\n  id: ID\n  id_in: [ID!]\n  id_nin: [ID!]\n  id_ne: ID\n  id_notnull: Boolean\n  id_null: Boolean\n  id_gt: ID\n  id_gte: ID\n  id_lt: ID\n  id_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  birthYear: String\n  birthYear_in: [String!]\n  birthYear_nin: [String!]\n  birthYear_ne: String\n  birthYear_notnull: Boolean\n  birthYear_null: Boolean\n  birthYear_like: String\n  birthYear_ilike: String\n  birthYear_gt: String\n  birthYear_gte: String\n  birthYear_lt: String\n  birthYear_lte: String\n  gender: String\n  gender_in: [String!]\n  gender_nin: [String!]\n  gender_ne: String\n  gender_notnull: Boolean\n  gender_null: Boolean\n  gender_like: String\n  gender_ilike: String\n  gender_gt: String\n  gender_gte: String\n  gender_lt: String\n  gender_lte: String\n  height: String\n  height_in: [String!]\n  height_nin: [String!]\n  height_ne: String\n  height_notnull: Boolean\n  height_null: Boolean\n  height_like: String\n  height_ilike: String\n  height_gt: String\n  height_gte: String\n  height_lt: String\n  height_lte: String\n}\n\n\"\"\"Data needed to create Agents.\"\"\"\ninput AgentInsertInput {\n  name: String!\n  birthYear: String\n  gender: String\n  height: String\n}\n\n\"\"\"Data needed to update Agents. An ID must be passed.\"\"\"\ninput AgentUpdateInput {\n  id: ID!\n  name: String\n  birthYear: String\n  gender: String\n  height: String\n}\n\n\"\"\"\nData needed to create or update Agents. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput AgentCreateOrUpdateInput {\n  id: ID\n  name: String\n  birthYear: String\n  gender: String\n  height: String\n}\n\n\"\"\"Pagination options for Agents.\"\"\"\ninput AgentsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: AgentsOrderByInput\n}\n\ninput AgentsOrderByInput {\n  id: Sort\n  name: Sort\n  birthYear: Sort\n  gender: Sort\n  height: Sort\n}\n\ntype Invoice @key(fields: \"invoiceId\", resolvable: false) {\n  invoiceId: ID!\n}\n\ntype Payment @key(fields: \"id\") {\n  id: ID!\n  agentId: ID!\n  invoiceId: ID!\n  amount: String!\n  reconciled: Boolean!\n  notes: String\n  paymentMethod: String!\n  owner: Agent!\n  invoice: Invoice!\n}\n\ninput PaymentsListFilter {\n  id: ID\n  id_in: [ID!]\n  id_nin: [ID!]\n  id_ne: ID\n  id_notnull: Boolean\n  id_null: Boolean\n  id_gt: ID\n  id_gte: ID\n  id_lt: ID\n  id_lte: ID\n  agentId: ID\n  agentId_in: [ID!]\n  agentId_nin: [ID!]\n  agentId_ne: ID\n  agentId_notnull: Boolean\n  agentId_null: Boolean\n  agentId_gt: ID\n  agentId_gte: ID\n  agentId_lt: ID\n  agentId_lte: ID\n  invoiceId: ID\n  invoiceId_in: [ID!]\n  invoiceId_nin: [ID!]\n  invoiceId_ne: ID\n  invoiceId_notnull: Boolean\n  invoiceId_null: Boolean\n  invoiceId_gt: ID\n  invoiceId_gte: ID\n  invoiceId_lt: ID\n  invoiceId_lte: ID\n  amount: String\n  amount_in: [String!]\n  amount_nin: [String!]\n  amount_ne: String\n  amount_notnull: Boolean\n  amount_null: Boolean\n  amount_like: String\n  amount_ilike: String\n  amount_gt: String\n  amount_gte: String\n  amount_lt: String\n  amount_lte: String\n  reconciled: Boolean\n  reconciled_in: [Boolean!]\n  reconciled_nin: [Boolean!]\n  reconciled_ne: Boolean\n  reconciled_notnull: Boolean\n  reconciled_null: Boolean\n  notes: String\n  notes_in: [String!]\n  notes_nin: [String!]\n  notes_ne: String\n  notes_notnull: Boolean\n  notes_null: Boolean\n  notes_like: String\n  notes_ilike: String\n  notes_gt: String\n  notes_gte: String\n  notes_lt: String\n  notes_lte: String\n  paymentMethod: String\n  paymentMethod_in: [String!]\n  paymentMethod_nin: [String!]\n  paymentMethod_ne: String\n  paymentMethod_notnull: Boolean\n  paymentMethod_null: Boolean\n  paymentMethod_like: String\n  paymentMethod_ilike: String\n  paymentMethod_gt: String\n  paymentMethod_gte: String\n  paymentMethod_lt: String\n  paymentMethod_lte: String\n  owner: AgentsListFilter\n}\n\n\"\"\"Data needed to create Payments.\"\"\"\ninput PaymentInsertInput {\n  agentId: ID!\n  invoiceId: ID!\n  amount: String!\n  reconciled: Boolean!\n  notes: String\n  paymentMethod: String!\n  owner: AgentCreateOrUpdateInput\n}\n\n\"\"\"Data needed to update Payments. An ID must be passed.\"\"\"\ninput PaymentUpdateInput {\n  id: ID!\n  agentId: ID\n  invoiceId: ID\n  amount: String\n  reconciled: Boolean\n  notes: String\n  paymentMethod: String\n  owner: AgentCreateOrUpdateInput\n}\n\n\"\"\"\nData needed to create or update Payments. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput PaymentCreateOrUpdateInput {\n  id: ID\n  agentId: ID\n  invoiceId: ID\n  amount: String\n  reconciled: Boolean\n  notes: String\n  paymentMethod: String\n  owner: AgentCreateOrUpdateInput\n}\n\n\"\"\"Pagination options for Payments.\"\"\"\ninput PaymentsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: PaymentsOrderByInput\n}\n\ninput PaymentsOrderByInput {\n  id: Sort\n  agentId: Sort\n  invoiceId: Sort\n  amount: Sort\n  reconciled: Sort\n  notes: Sort\n  paymentMethod: Sort\n}\n\ntype Trace @key(fields: \"id\") {\n  id: ID!\n  spanId: String!\n  parentId: String\n  name: String!\n  timestamp: NanoTimestamp!\n  duration: NanoDuration!\n  traceId: String!\n  attributes: JSON!\n}\n\n\"\"\"A timestamp in nanoseconds\"\"\"\nscalar NanoTimestamp\n\n\"\"\"A duration in nanoseconds\"\"\"\nscalar NanoDuration\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON @specifiedBy(url: \"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\")\n\ninput TracesListFilter {\n  id: ID\n  id_in: [ID!]\n  id_nin: [ID!]\n  id_ne: ID\n  id_notnull: Boolean\n  id_null: Boolean\n  id_gt: ID\n  id_gte: ID\n  id_lt: ID\n  id_lte: ID\n  spanId: String\n  spanId_in: [String!]\n  spanId_nin: [String!]\n  spanId_ne: String\n  spanId_notnull: Boolean\n  spanId_null: Boolean\n  spanId_like: String\n  spanId_ilike: String\n  spanId_gt: String\n  spanId_gte: String\n  spanId_lt: String\n  spanId_lte: String\n  parentId: String\n  parentId_in: [String!]\n  parentId_nin: [String!]\n  parentId_ne: String\n  parentId_notnull: Boolean\n  parentId_null: Boolean\n  parentId_like: String\n  parentId_ilike: String\n  parentId_gt: String\n  parentId_gte: String\n  parentId_lt: String\n  parentId_lte: String\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  timestamp: NanoTimestamp\n  timestamp_in: [NanoTimestamp!]\n  timestamp_nin: [NanoTimestamp!]\n  timestamp_ne: NanoTimestamp\n  timestamp_notnull: Boolean\n  timestamp_null: Boolean\n  timestamp_gt: NanoTimestamp\n  timestamp_gte: NanoTimestamp\n  timestamp_lt: NanoTimestamp\n  timestamp_lte: NanoTimestamp\n  duration: NanoDuration\n  duration_in: [NanoDuration!]\n  duration_nin: [NanoDuration!]\n  duration_ne: NanoDuration\n  duration_notnull: Boolean\n  duration_null: Boolean\n  duration_gt: NanoDuration\n  duration_gte: NanoDuration\n  duration_lt: NanoDuration\n  duration_lte: NanoDuration\n  traceId: String\n  traceId_in: [String!]\n  traceId_nin: [String!]\n  traceId_ne: String\n  traceId_notnull: Boolean\n  traceId_null: Boolean\n  traceId_like: String\n  traceId_ilike: String\n  traceId_gt: String\n  traceId_gte: String\n  traceId_lt: String\n  traceId_lte: String\n  attributes: JSON\n  attributes_in: [JSON!]\n  attributes_nin: [JSON!]\n  attributes_ne: JSON\n  attributes_notnull: Boolean\n  attributes_null: Boolean\n}\n\n\"\"\"Pagination options for Traces.\"\"\"\ninput TracesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: TracesOrderByInput\n}\n\ninput TracesOrderByInput {\n  id: Sort\n  spanId: Sort\n  parentId: Sort\n  name: Sort\n  timestamp: Sort\n  duration: Sort\n  traceId: Sort\n  attributes: Sort\n}\n\ntype _Service {\n  sdl: String!\n}\n\nenum Sort {\n  ASC\n  DESC\n}\n\nenum AdminUiFilterType {\n  DATE_RANGE\n  ENUM\n  NUMERIC\n  RELATIONSHIP\n  TEXT\n  BOOLEAN\n}\n\nenum AggregationType {\n  COUNT\n}\n\nenum link__Purpose {\n  SECURITY\n  EXECUTION\n}\n\ntype AggregationResultFromPaymentsSubgraph {\n  count: Int!\n}\n\ninput DeleteOneFilterInput {\n  id: ID!\n}\n\ntype Query {\n  \"\"\"Get a single Agent.\"\"\"\n  agent(id: ID!): Agent\n  \"\"\"Get multiple Agents.\"\"\"\n  agents(filter: AgentsListFilter, pagination: AgentsPaginationInput): [Agent]\n  \"\"\"Get a single Payment.\"\"\"\n  payment(id: ID!): Payment\n  \"\"\"Get multiple Payments.\"\"\"\n  payments(filter: PaymentsListFilter, pagination: PaymentsPaginationInput): [Payment]\n  \"\"\"Get aggregated data for Payments.\"\"\"\n  payments_aggregate(filter: PaymentsListFilter): AggregationResultFromPaymentsSubgraph\n  \"\"\"Get a single Trace.\"\"\"\n  trace(id: ID!): Trace\n  \"\"\"Get multiple Traces.\"\"\"\n  traces(filter: TracesListFilter, pagination: TracesPaginationInput): [Trace]\n  \"\"\"Get aggregated data for Traces.\"\"\"\n  traces_aggregate(filter: TracesListFilter): AggregationResultFromPaymentsSubgraph\n  \"\"\"\n  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied.\n  \"\"\"\n  _service: _Service\n  \"\"\"\n  Union of all types in this subgraph. This information is needed by the Apollo federation gateway.\n  \"\"\"\n  _entities(representations: [_Any!]): [_Entity]!\n}\n\nunion _Entity = Agent | Invoice | Payment | Trace\n\nscalar _Any\n\ntype Mutation {\n  \"\"\"Create a single Agent.\"\"\"\n  createAgent(input: AgentInsertInput!): Agent\n  \"\"\"Create many Agents.\"\"\"\n  createAgents(input: [AgentInsertInput!]!): [Agent]\n  \"\"\"Update a single Agent.\"\"\"\n  updateAgent(input: AgentUpdateInput!): Agent\n  \"\"\"Update many Agents.\"\"\"\n  updateAgents(input: [AgentUpdateInput!]!): [Agent]\n  \"\"\"Create or update many Agents.\"\"\"\n  createOrUpdateAgents(input: [AgentCreateOrUpdateInput!]!): [Agent]\n  \"\"\"Delete a single Agent.\"\"\"\n  deleteAgent(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Agents with a filter.\"\"\"\n  deleteAgents(filter: AgentsListFilter!): Boolean\n  \"\"\"Create a single Payment.\"\"\"\n  createPayment(input: PaymentInsertInput!): Payment\n  \"\"\"Create many Payments.\"\"\"\n  createPayments(input: [PaymentInsertInput!]!): [Payment]\n  \"\"\"Update a single Payment.\"\"\"\n  updatePayment(input: PaymentUpdateInput!): Payment\n  \"\"\"Update many Payments.\"\"\"\n  updatePayments(input: [PaymentUpdateInput!]!): [Payment]\n  \"\"\"Create or update many Payments.\"\"\"\n  createOrUpdatePayments(input: [PaymentCreateOrUpdateInput!]!): [Payment]\n  \"\"\"Delete a single Payment.\"\"\"\n  deletePayment(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Payments with a filter.\"\"\"\n  deletePayments(filter: PaymentsListFilter!): Boolean\n}\n\nscalar link__Import\n\nscalar federation__FieldSet"},"upstreamSchema":{"key":"16508bb3ec3f2ccfc6a52c39ef33cf705e5d7460"}},"requestTimeoutSeconds":"10","id":"1","keys":[{"typeName":"Agent","selectionSet":"id"},{"typeName":"Invoice","selectionSet":"invoiceId","disableEntityResolver":true},{"typeName":"Payment","selectionSet":"id"},{"typeName":"Trace","selectionSet":"id"}]}],"fieldConfigurations":[{"typeName":"Artist","fieldName":"albums","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Artist","fieldName":"albums_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Genre","fieldName":"tracks","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Genre","fieldName":"tracks_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Employee","fieldName":"employee","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Employee","fieldName":"employee_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Employee","fieldName":"customers","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Employee","fieldName":"customers_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Employee","fieldName":"employees","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Employee","fieldName":"employees_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Customer","fieldName":"employee","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Customer","fieldName":"employee_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Customer","fieldName":"invoices","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Customer","fieldName":"invoices_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Invoice","fieldName":"customer","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Invoice","fieldName":"customer_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Invoice","fieldName":"invoiceLines","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Invoice","fieldName":"invoiceLines_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"InvoiceLine","fieldName":"invoice","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"InvoiceLine","fieldName":"invoice_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"InvoiceLine","fieldName":"track","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"InvoiceLine","fieldName":"track_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"MediaType","fieldName":"tracks","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"MediaType","fieldName":"tracks_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Playlist","fieldName":"tracks","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Playlist","fieldName":"tracks_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"album","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"album_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"mediaType","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"mediaType_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"genre","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"genre_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"invoiceLines","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"invoiceLines_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"playlists","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Track","fieldName":"playlists_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Album","fieldName":"artist","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Album","fieldName":"artist_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Album","fieldName":"tracks","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Album","fieldName":"tracks_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"artist","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"artists","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"artists_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"genre","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"genres","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"genres_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"employee","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"employees","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"employees_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"customer","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"customers","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"customers_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"invoice","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"invoices","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"invoices_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"invoiceLine","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"invoiceLines","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"invoiceLines_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"mediaType","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"mediaTypes","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"mediaTypes_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"playlist","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"playlists","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"playlists_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"track","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"tracks","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"tracks_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"album","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"albums","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"albums_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"agent","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"agents","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"payment","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"payments","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"payments_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"trace","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"traces","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"},{"name":"pagination","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"traces_aggregate","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createArtist","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createArtists","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateArtist","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateArtists","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateArtists","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteArtist","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteArtists","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createGenre","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createGenres","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateGenre","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateGenres","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateGenres","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteGenre","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteGenres","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createEmployee","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createEmployees","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateEmployee","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateEmployees","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateEmployees","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteEmployee","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteEmployees","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createCustomer","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createCustomers","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateCustomer","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateCustomers","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateCustomers","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteCustomer","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteCustomers","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createInvoice","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createInvoices","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateInvoice","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateInvoices","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateInvoices","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteInvoice","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteInvoices","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createInvoiceLine","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createInvoiceLines","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateInvoiceLine","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateInvoiceLines","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateInvoiceLines","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteInvoiceLine","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteInvoiceLines","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createMediaType","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createMediaTypes","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateMediaType","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateMediaTypes","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateMediaTypes","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteMediaType","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteMediaTypes","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createPlaylist","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createPlaylists","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updatePlaylist","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updatePlaylists","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdatePlaylists","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deletePlaylist","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deletePlaylists","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createTrack","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createTracks","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateTrack","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateTracks","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateTracks","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteTrack","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteTracks","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createAlbum","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createAlbums","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateAlbum","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateAlbums","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateAlbums","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteAlbum","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteAlbums","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createAgent","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createAgents","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateAgent","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updateAgents","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdateAgents","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteAgent","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deleteAgents","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createPayment","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createPayments","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updatePayment","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"updatePayments","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"createOrUpdatePayments","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deletePayment","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"deletePayments","argumentsConfiguration":[{"name":"filter","sourceType":"FIELD_ARGUMENT"}]}],"graphqlSchema":"schema {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Artist {\n  artistId: ID!\n  name: String\n  albums(filter: AlbumsListFilter): [Album!]!\n  albums_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput ArtistsListFilter {\n  artistId: ID\n  artistId_in: [ID!]\n  artistId_nin: [ID!]\n  artistId_ne: ID\n  artistId_notnull: Boolean\n  artistId_null: Boolean\n  artistId_gt: ID\n  artistId_gte: ID\n  artistId_lt: ID\n  artistId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  albums: AlbumsListFilter\n}\n\n\"\"\"Data needed to create Artists.\"\"\"\ninput ArtistInsertInput {\n  name: String\n  albums: [AlbumCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Artists. An ID must be passed.\"\"\"\ninput ArtistUpdateInput {\n  artistId: ID!\n  name: String\n  albums: [AlbumCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Artists. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput ArtistCreateOrUpdateInput {\n  artistId: ID\n  name: String\n  albums: [AlbumCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Artists.\"\"\"\ninput ArtistsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: ArtistsOrderByInput\n}\n\ninput ArtistsOrderByInput {\n  artistId: Sort\n  name: Sort\n}\n\ntype Genre {\n  genreId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput GenresListFilter {\n  genreId: ID\n  genreId_in: [ID!]\n  genreId_nin: [ID!]\n  genreId_ne: ID\n  genreId_notnull: Boolean\n  genreId_null: Boolean\n  genreId_gt: ID\n  genreId_gte: ID\n  genreId_lt: ID\n  genreId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create Genres.\"\"\"\ninput GenreInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Genres. An ID must be passed.\"\"\"\ninput GenreUpdateInput {\n  genreId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Genres. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput GenreCreateOrUpdateInput {\n  genreId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Genres.\"\"\"\ninput GenresPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: GenresOrderByInput\n}\n\ninput GenresOrderByInput {\n  genreId: Sort\n  name: Sort\n}\n\ntype Employee {\n  employeeId: ID!\n  lastName: String!\n  firstName: String!\n  title: String\n  employee(filter: EmployeesListFilter): Employee\n  employee_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers(filter: CustomersListFilter): [Customer!]!\n  customers_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  employees(filter: EmployeesListFilter): [Employee!]!\n  employees_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n}\n\n\"\"\"\nReturns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".\n\"\"\"\nscalar ISOString\n\ninput EmployeesListFilter {\n  employeeId: ID\n  employeeId_in: [ID!]\n  employeeId_nin: [ID!]\n  employeeId_ne: ID\n  employeeId_notnull: Boolean\n  employeeId_null: Boolean\n  employeeId_gt: ID\n  employeeId_gte: ID\n  employeeId_lt: ID\n  employeeId_lte: ID\n  lastName: String\n  lastName_in: [String!]\n  lastName_nin: [String!]\n  lastName_ne: String\n  lastName_notnull: Boolean\n  lastName_null: Boolean\n  lastName_like: String\n  lastName_ilike: String\n  lastName_gt: String\n  lastName_gte: String\n  lastName_lt: String\n  lastName_lte: String\n  firstName: String\n  firstName_in: [String!]\n  firstName_nin: [String!]\n  firstName_ne: String\n  firstName_notnull: Boolean\n  firstName_null: Boolean\n  firstName_like: String\n  firstName_ilike: String\n  firstName_gt: String\n  firstName_gte: String\n  firstName_lt: String\n  firstName_lte: String\n  title: String\n  title_in: [String!]\n  title_nin: [String!]\n  title_ne: String\n  title_notnull: Boolean\n  title_null: Boolean\n  title_like: String\n  title_ilike: String\n  title_gt: String\n  title_gte: String\n  title_lt: String\n  title_lte: String\n  employee: EmployeesListFilter\n  birthDate: ISOString\n  birthDate_in: [ISOString!]\n  birthDate_nin: [ISOString!]\n  birthDate_ne: ISOString\n  birthDate_notnull: Boolean\n  birthDate_null: Boolean\n  birthDate_gt: ISOString\n  birthDate_gte: ISOString\n  birthDate_lt: ISOString\n  birthDate_lte: ISOString\n  hireDate: ISOString\n  hireDate_in: [ISOString!]\n  hireDate_nin: [ISOString!]\n  hireDate_ne: ISOString\n  hireDate_notnull: Boolean\n  hireDate_null: Boolean\n  hireDate_gt: ISOString\n  hireDate_gte: ISOString\n  hireDate_lt: ISOString\n  hireDate_lte: ISOString\n  address: String\n  address_in: [String!]\n  address_nin: [String!]\n  address_ne: String\n  address_notnull: Boolean\n  address_null: Boolean\n  address_like: String\n  address_ilike: String\n  address_gt: String\n  address_gte: String\n  address_lt: String\n  address_lte: String\n  city: String\n  city_in: [String!]\n  city_nin: [String!]\n  city_ne: String\n  city_notnull: Boolean\n  city_null: Boolean\n  city_like: String\n  city_ilike: String\n  city_gt: String\n  city_gte: String\n  city_lt: String\n  city_lte: String\n  state: String\n  state_in: [String!]\n  state_nin: [String!]\n  state_ne: String\n  state_notnull: Boolean\n  state_null: Boolean\n  state_like: String\n  state_ilike: String\n  state_gt: String\n  state_gte: String\n  state_lt: String\n  state_lte: String\n  country: String\n  country_in: [String!]\n  country_nin: [String!]\n  country_ne: String\n  country_notnull: Boolean\n  country_null: Boolean\n  country_like: String\n  country_ilike: String\n  country_gt: String\n  country_gte: String\n  country_lt: String\n  country_lte: String\n  postalCode: String\n  postalCode_in: [String!]\n  postalCode_nin: [String!]\n  postalCode_ne: String\n  postalCode_notnull: Boolean\n  postalCode_null: Boolean\n  postalCode_like: String\n  postalCode_ilike: String\n  postalCode_gt: String\n  postalCode_gte: String\n  postalCode_lt: String\n  postalCode_lte: String\n  phone: String\n  phone_in: [String!]\n  phone_nin: [String!]\n  phone_ne: String\n  phone_notnull: Boolean\n  phone_null: Boolean\n  phone_like: String\n  phone_ilike: String\n  phone_gt: String\n  phone_gte: String\n  phone_lt: String\n  phone_lte: String\n  fax: String\n  fax_in: [String!]\n  fax_nin: [String!]\n  fax_ne: String\n  fax_notnull: Boolean\n  fax_null: Boolean\n  fax_like: String\n  fax_ilike: String\n  fax_gt: String\n  fax_gte: String\n  fax_lt: String\n  fax_lte: String\n  email: String\n  email_in: [String!]\n  email_nin: [String!]\n  email_ne: String\n  email_notnull: Boolean\n  email_null: Boolean\n  email_like: String\n  email_ilike: String\n  email_gt: String\n  email_gte: String\n  email_lt: String\n  email_lte: String\n  customers: CustomersListFilter\n  employees: EmployeesListFilter\n}\n\n\"\"\"Data needed to create Employees.\"\"\"\ninput EmployeeInsertInput {\n  lastName: String!\n  firstName: String!\n  title: String\n  employee: EmployeeCreateOrUpdateInput\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers: [CustomerCreateOrUpdateInput!]\n  employees: [EmployeeCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Employees. An ID must be passed.\"\"\"\ninput EmployeeUpdateInput {\n  employeeId: ID!\n  lastName: String\n  firstName: String\n  title: String\n  employee: EmployeeCreateOrUpdateInput\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers: [CustomerCreateOrUpdateInput!]\n  employees: [EmployeeCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Employees. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput EmployeeCreateOrUpdateInput {\n  employeeId: ID\n  lastName: String\n  firstName: String\n  title: String\n  employee: EmployeeCreateOrUpdateInput\n  birthDate: ISOString\n  hireDate: ISOString\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  customers: [CustomerCreateOrUpdateInput!]\n  employees: [EmployeeCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Employees.\"\"\"\ninput EmployeesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: EmployeesOrderByInput\n}\n\ninput EmployeesOrderByInput {\n  employeeId: Sort\n  lastName: Sort\n  firstName: Sort\n  title: Sort\n  birthDate: Sort\n  hireDate: Sort\n  address: Sort\n  city: Sort\n  state: Sort\n  country: Sort\n  postalCode: Sort\n  phone: Sort\n  fax: Sort\n  email: Sort\n}\n\ntype Customer {\n  customerId: ID!\n  firstName: String!\n  lastName: String!\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String!\n  employee(filter: EmployeesListFilter): Employee\n  employee_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  invoices(filter: InvoicesListFilter): [Invoice!]!\n  invoices_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput CustomersListFilter {\n  customerId: ID\n  customerId_in: [ID!]\n  customerId_nin: [ID!]\n  customerId_ne: ID\n  customerId_notnull: Boolean\n  customerId_null: Boolean\n  customerId_gt: ID\n  customerId_gte: ID\n  customerId_lt: ID\n  customerId_lte: ID\n  firstName: String\n  firstName_in: [String!]\n  firstName_nin: [String!]\n  firstName_ne: String\n  firstName_notnull: Boolean\n  firstName_null: Boolean\n  firstName_like: String\n  firstName_ilike: String\n  firstName_gt: String\n  firstName_gte: String\n  firstName_lt: String\n  firstName_lte: String\n  lastName: String\n  lastName_in: [String!]\n  lastName_nin: [String!]\n  lastName_ne: String\n  lastName_notnull: Boolean\n  lastName_null: Boolean\n  lastName_like: String\n  lastName_ilike: String\n  lastName_gt: String\n  lastName_gte: String\n  lastName_lt: String\n  lastName_lte: String\n  company: String\n  company_in: [String!]\n  company_nin: [String!]\n  company_ne: String\n  company_notnull: Boolean\n  company_null: Boolean\n  company_like: String\n  company_ilike: String\n  company_gt: String\n  company_gte: String\n  company_lt: String\n  company_lte: String\n  address: String\n  address_in: [String!]\n  address_nin: [String!]\n  address_ne: String\n  address_notnull: Boolean\n  address_null: Boolean\n  address_like: String\n  address_ilike: String\n  address_gt: String\n  address_gte: String\n  address_lt: String\n  address_lte: String\n  city: String\n  city_in: [String!]\n  city_nin: [String!]\n  city_ne: String\n  city_notnull: Boolean\n  city_null: Boolean\n  city_like: String\n  city_ilike: String\n  city_gt: String\n  city_gte: String\n  city_lt: String\n  city_lte: String\n  state: String\n  state_in: [String!]\n  state_nin: [String!]\n  state_ne: String\n  state_notnull: Boolean\n  state_null: Boolean\n  state_like: String\n  state_ilike: String\n  state_gt: String\n  state_gte: String\n  state_lt: String\n  state_lte: String\n  country: String\n  country_in: [String!]\n  country_nin: [String!]\n  country_ne: String\n  country_notnull: Boolean\n  country_null: Boolean\n  country_like: String\n  country_ilike: String\n  country_gt: String\n  country_gte: String\n  country_lt: String\n  country_lte: String\n  postalCode: String\n  postalCode_in: [String!]\n  postalCode_nin: [String!]\n  postalCode_ne: String\n  postalCode_notnull: Boolean\n  postalCode_null: Boolean\n  postalCode_like: String\n  postalCode_ilike: String\n  postalCode_gt: String\n  postalCode_gte: String\n  postalCode_lt: String\n  postalCode_lte: String\n  phone: String\n  phone_in: [String!]\n  phone_nin: [String!]\n  phone_ne: String\n  phone_notnull: Boolean\n  phone_null: Boolean\n  phone_like: String\n  phone_ilike: String\n  phone_gt: String\n  phone_gte: String\n  phone_lt: String\n  phone_lte: String\n  fax: String\n  fax_in: [String!]\n  fax_nin: [String!]\n  fax_ne: String\n  fax_notnull: Boolean\n  fax_null: Boolean\n  fax_like: String\n  fax_ilike: String\n  fax_gt: String\n  fax_gte: String\n  fax_lt: String\n  fax_lte: String\n  email: String\n  email_in: [String!]\n  email_nin: [String!]\n  email_ne: String\n  email_notnull: Boolean\n  email_null: Boolean\n  email_like: String\n  email_ilike: String\n  email_gt: String\n  email_gte: String\n  email_lt: String\n  email_lte: String\n  employee: EmployeesListFilter\n  invoices: InvoicesListFilter\n}\n\n\"\"\"Data needed to create Customers.\"\"\"\ninput CustomerInsertInput {\n  firstName: String!\n  lastName: String!\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String!\n  employee: EmployeeCreateOrUpdateInput\n  invoices: [InvoiceCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Customers. An ID must be passed.\"\"\"\ninput CustomerUpdateInput {\n  customerId: ID!\n  firstName: String\n  lastName: String\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  invoices: [InvoiceCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Customers. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput CustomerCreateOrUpdateInput {\n  customerId: ID\n  firstName: String\n  lastName: String\n  company: String\n  address: String\n  city: String\n  state: String\n  country: String\n  postalCode: String\n  phone: String\n  fax: String\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  invoices: [InvoiceCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Customers.\"\"\"\ninput CustomersPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: CustomersOrderByInput\n}\n\ninput CustomersOrderByInput {\n  customerId: Sort\n  firstName: Sort\n  lastName: Sort\n  company: Sort\n  address: Sort\n  city: Sort\n  state: Sort\n  country: Sort\n  postalCode: Sort\n  phone: Sort\n  fax: Sort\n  email: Sort\n}\n\ntype Invoice {\n  invoiceId: ID!\n  customer(filter: CustomersListFilter): Customer!\n  customer_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  invoiceDate: ISOString!\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String!\n  invoiceLines(filter: InvoiceLinesListFilter): [InvoiceLine!]!\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput InvoicesListFilter {\n  invoiceId: ID\n  invoiceId_in: [ID!]\n  invoiceId_nin: [ID!]\n  invoiceId_ne: ID\n  invoiceId_notnull: Boolean\n  invoiceId_null: Boolean\n  invoiceId_gt: ID\n  invoiceId_gte: ID\n  invoiceId_lt: ID\n  invoiceId_lte: ID\n  customer: CustomersListFilter\n  invoiceDate: ISOString\n  invoiceDate_in: [ISOString!]\n  invoiceDate_nin: [ISOString!]\n  invoiceDate_ne: ISOString\n  invoiceDate_notnull: Boolean\n  invoiceDate_null: Boolean\n  invoiceDate_gt: ISOString\n  invoiceDate_gte: ISOString\n  invoiceDate_lt: ISOString\n  invoiceDate_lte: ISOString\n  billingAddress: String\n  billingAddress_in: [String!]\n  billingAddress_nin: [String!]\n  billingAddress_ne: String\n  billingAddress_notnull: Boolean\n  billingAddress_null: Boolean\n  billingAddress_like: String\n  billingAddress_ilike: String\n  billingAddress_gt: String\n  billingAddress_gte: String\n  billingAddress_lt: String\n  billingAddress_lte: String\n  billingCity: String\n  billingCity_in: [String!]\n  billingCity_nin: [String!]\n  billingCity_ne: String\n  billingCity_notnull: Boolean\n  billingCity_null: Boolean\n  billingCity_like: String\n  billingCity_ilike: String\n  billingCity_gt: String\n  billingCity_gte: String\n  billingCity_lt: String\n  billingCity_lte: String\n  billingState: String\n  billingState_in: [String!]\n  billingState_nin: [String!]\n  billingState_ne: String\n  billingState_notnull: Boolean\n  billingState_null: Boolean\n  billingState_like: String\n  billingState_ilike: String\n  billingState_gt: String\n  billingState_gte: String\n  billingState_lt: String\n  billingState_lte: String\n  billingCountry: String\n  billingCountry_in: [String!]\n  billingCountry_nin: [String!]\n  billingCountry_ne: String\n  billingCountry_notnull: Boolean\n  billingCountry_null: Boolean\n  billingCountry_like: String\n  billingCountry_ilike: String\n  billingCountry_gt: String\n  billingCountry_gte: String\n  billingCountry_lt: String\n  billingCountry_lte: String\n  billingPostalCode: String\n  billingPostalCode_in: [String!]\n  billingPostalCode_nin: [String!]\n  billingPostalCode_ne: String\n  billingPostalCode_notnull: Boolean\n  billingPostalCode_null: Boolean\n  billingPostalCode_like: String\n  billingPostalCode_ilike: String\n  billingPostalCode_gt: String\n  billingPostalCode_gte: String\n  billingPostalCode_lt: String\n  billingPostalCode_lte: String\n  total: String\n  total_in: [String!]\n  total_nin: [String!]\n  total_ne: String\n  total_notnull: Boolean\n  total_null: Boolean\n  total_like: String\n  total_ilike: String\n  total_gt: String\n  total_gte: String\n  total_lt: String\n  total_lte: String\n  invoiceLines: InvoiceLinesListFilter\n}\n\n\"\"\"Data needed to create Invoices.\"\"\"\ninput InvoiceInsertInput {\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString!\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String!\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Invoices. An ID must be passed.\"\"\"\ninput InvoiceUpdateInput {\n  invoiceId: ID!\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Invoices. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput InvoiceCreateOrUpdateInput {\n  invoiceId: ID\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString\n  billingAddress: String\n  billingCity: String\n  billingState: String\n  billingCountry: String\n  billingPostalCode: String\n  total: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Invoices.\"\"\"\ninput InvoicesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: InvoicesOrderByInput\n}\n\ninput InvoicesOrderByInput {\n  invoiceId: Sort\n  invoiceDate: Sort\n  billingAddress: Sort\n  billingCity: Sort\n  billingState: Sort\n  billingCountry: Sort\n  billingPostalCode: Sort\n  total: Sort\n}\n\ntype InvoiceLine {\n  invoiceLineId: ID!\n  invoice(filter: InvoicesListFilter): Invoice!\n  invoice_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  track(filter: TracksListFilter): Track!\n  track_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n  unitPrice: String!\n  quantity: Float!\n}\n\ninput InvoiceLinesListFilter {\n  invoiceLineId: ID\n  invoiceLineId_in: [ID!]\n  invoiceLineId_nin: [ID!]\n  invoiceLineId_ne: ID\n  invoiceLineId_notnull: Boolean\n  invoiceLineId_null: Boolean\n  invoiceLineId_gt: ID\n  invoiceLineId_gte: ID\n  invoiceLineId_lt: ID\n  invoiceLineId_lte: ID\n  invoice: InvoicesListFilter\n  track: TracksListFilter\n  unitPrice: String\n  unitPrice_in: [String!]\n  unitPrice_nin: [String!]\n  unitPrice_ne: String\n  unitPrice_notnull: Boolean\n  unitPrice_null: Boolean\n  unitPrice_like: String\n  unitPrice_ilike: String\n  unitPrice_gt: String\n  unitPrice_gte: String\n  unitPrice_lt: String\n  unitPrice_lte: String\n  quantity: Float\n  quantity_in: [Float!]\n  quantity_nin: [Float!]\n  quantity_ne: Float\n  quantity_notnull: Boolean\n  quantity_null: Boolean\n}\n\n\"\"\"Data needed to create InvoiceLines.\"\"\"\ninput InvoiceLineInsertInput {\n  invoice: InvoiceCreateOrUpdateInput\n  track: TrackCreateOrUpdateInput\n  unitPrice: String!\n  quantity: Float!\n}\n\n\"\"\"Data needed to update InvoiceLines. An ID must be passed.\"\"\"\ninput InvoiceLineUpdateInput {\n  invoiceLineId: ID!\n  invoice: InvoiceCreateOrUpdateInput\n  track: TrackCreateOrUpdateInput\n  unitPrice: String\n  quantity: Float\n}\n\n\"\"\"\nData needed to create or update InvoiceLines. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput InvoiceLineCreateOrUpdateInput {\n  invoiceLineId: ID\n  invoice: InvoiceCreateOrUpdateInput\n  track: TrackCreateOrUpdateInput\n  unitPrice: String\n  quantity: Float\n}\n\n\"\"\"Pagination options for InvoiceLines.\"\"\"\ninput InvoiceLinesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: InvoiceLinesOrderByInput\n}\n\ninput InvoiceLinesOrderByInput {\n  invoiceLineId: Sort\n  unitPrice: Sort\n  quantity: Sort\n}\n\ntype MediaType {\n  mediaTypeId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput MediaTypesListFilter {\n  mediaTypeId: ID\n  mediaTypeId_in: [ID!]\n  mediaTypeId_nin: [ID!]\n  mediaTypeId_ne: ID\n  mediaTypeId_notnull: Boolean\n  mediaTypeId_null: Boolean\n  mediaTypeId_gt: ID\n  mediaTypeId_gte: ID\n  mediaTypeId_lt: ID\n  mediaTypeId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create MediaTypes.\"\"\"\ninput MediaTypeInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update MediaTypes. An ID must be passed.\"\"\"\ninput MediaTypeUpdateInput {\n  mediaTypeId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update MediaTypes. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput MediaTypeCreateOrUpdateInput {\n  mediaTypeId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for MediaTypes.\"\"\"\ninput MediaTypesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: MediaTypesOrderByInput\n}\n\ninput MediaTypesOrderByInput {\n  mediaTypeId: Sort\n  name: Sort\n}\n\ntype Playlist {\n  playlistId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput PlaylistsListFilter {\n  playlistId: ID\n  playlistId_in: [ID!]\n  playlistId_nin: [ID!]\n  playlistId_ne: ID\n  playlistId_notnull: Boolean\n  playlistId_null: Boolean\n  playlistId_gt: ID\n  playlistId_gte: ID\n  playlistId_lt: ID\n  playlistId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create Playlists.\"\"\"\ninput PlaylistInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Playlists. An ID must be passed.\"\"\"\ninput PlaylistUpdateInput {\n  playlistId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Playlists. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput PlaylistCreateOrUpdateInput {\n  playlistId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Playlists.\"\"\"\ninput PlaylistsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: PlaylistsOrderByInput\n}\n\ninput PlaylistsOrderByInput {\n  playlistId: Sort\n  name: Sort\n}\n\ntype Track {\n  trackId: ID!\n  name: String!\n  album(filter: AlbumsListFilter): Album\n  album_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  mediaType(filter: MediaTypesListFilter): MediaType!\n  mediaType_aggregate(filter: MediaTypesListFilter): AggregationResultFromMusicSubgraph\n  genre(filter: GenresListFilter): Genre\n  genre_aggregate(filter: GenresListFilter): AggregationResultFromMusicSubgraph\n  composer: String\n  milliseconds: Float!\n  bytes: Float\n  unitPrice: String!\n  invoiceLines(filter: InvoiceLinesListFilter): [InvoiceLine!]!\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  playlists(filter: PlaylistsListFilter): [Playlist!]!\n  playlists_aggregate(filter: PlaylistsListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput TracksListFilter {\n  trackId: ID\n  trackId_in: [ID!]\n  trackId_nin: [ID!]\n  trackId_ne: ID\n  trackId_notnull: Boolean\n  trackId_null: Boolean\n  trackId_gt: ID\n  trackId_gte: ID\n  trackId_lt: ID\n  trackId_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  album: AlbumsListFilter\n  mediaType: MediaTypesListFilter\n  genre: GenresListFilter\n  composer: String\n  composer_in: [String!]\n  composer_nin: [String!]\n  composer_ne: String\n  composer_notnull: Boolean\n  composer_null: Boolean\n  composer_like: String\n  composer_ilike: String\n  composer_gt: String\n  composer_gte: String\n  composer_lt: String\n  composer_lte: String\n  milliseconds: Float\n  milliseconds_in: [Float!]\n  milliseconds_nin: [Float!]\n  milliseconds_ne: Float\n  milliseconds_notnull: Boolean\n  milliseconds_null: Boolean\n  bytes: Float\n  bytes_in: [Float!]\n  bytes_nin: [Float!]\n  bytes_ne: Float\n  bytes_notnull: Boolean\n  bytes_null: Boolean\n  unitPrice: String\n  unitPrice_in: [String!]\n  unitPrice_nin: [String!]\n  unitPrice_ne: String\n  unitPrice_notnull: Boolean\n  unitPrice_null: Boolean\n  unitPrice_like: String\n  unitPrice_ilike: String\n  unitPrice_gt: String\n  unitPrice_gte: String\n  unitPrice_lt: String\n  unitPrice_lte: String\n  invoiceLines: InvoiceLinesListFilter\n  playlists: PlaylistsListFilter\n}\n\n\"\"\"Data needed to create Tracks.\"\"\"\ninput TrackInsertInput {\n  name: String!\n  album: AlbumCreateOrUpdateInput\n  mediaType: MediaTypeCreateOrUpdateInput\n  genre: GenreCreateOrUpdateInput\n  composer: String\n  milliseconds: Float!\n  bytes: Float\n  unitPrice: String!\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  playlists: [PlaylistCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Tracks. An ID must be passed.\"\"\"\ninput TrackUpdateInput {\n  trackId: ID!\n  name: String\n  album: AlbumCreateOrUpdateInput\n  mediaType: MediaTypeCreateOrUpdateInput\n  genre: GenreCreateOrUpdateInput\n  composer: String\n  milliseconds: Float\n  bytes: Float\n  unitPrice: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  playlists: [PlaylistCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Tracks. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput TrackCreateOrUpdateInput {\n  trackId: ID\n  name: String\n  album: AlbumCreateOrUpdateInput\n  mediaType: MediaTypeCreateOrUpdateInput\n  genre: GenreCreateOrUpdateInput\n  composer: String\n  milliseconds: Float\n  bytes: Float\n  unitPrice: String\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  playlists: [PlaylistCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Tracks.\"\"\"\ninput TracksPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: TracksOrderByInput\n}\n\ninput TracksOrderByInput {\n  trackId: Sort\n  name: Sort\n  composer: Sort\n  milliseconds: Sort\n  bytes: Sort\n  unitPrice: Sort\n}\n\ntype Album {\n  albumId: ID!\n  title: String!\n  artist(filter: ArtistsListFilter): Artist!\n  artist_aggregate(filter: ArtistsListFilter): AggregationResultFromMusicSubgraph\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\ninput AlbumsListFilter {\n  albumId: ID\n  albumId_in: [ID!]\n  albumId_nin: [ID!]\n  albumId_ne: ID\n  albumId_notnull: Boolean\n  albumId_null: Boolean\n  albumId_gt: ID\n  albumId_gte: ID\n  albumId_lt: ID\n  albumId_lte: ID\n  title: String\n  title_in: [String!]\n  title_nin: [String!]\n  title_ne: String\n  title_notnull: Boolean\n  title_null: Boolean\n  title_like: String\n  title_ilike: String\n  title_gt: String\n  title_gte: String\n  title_lt: String\n  title_lte: String\n  artist: ArtistsListFilter\n  tracks: TracksListFilter\n}\n\n\"\"\"Data needed to create Albums.\"\"\"\ninput AlbumInsertInput {\n  title: String!\n  artist: ArtistCreateOrUpdateInput\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Albums. An ID must be passed.\"\"\"\ninput AlbumUpdateInput {\n  albumId: ID!\n  title: String\n  artist: ArtistCreateOrUpdateInput\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"\nData needed to create or update Albums. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput AlbumCreateOrUpdateInput {\n  albumId: ID\n  title: String\n  artist: ArtistCreateOrUpdateInput\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Pagination options for Albums.\"\"\"\ninput AlbumsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: AlbumsOrderByInput\n}\n\ninput AlbumsOrderByInput {\n  albumId: Sort\n  title: Sort\n}\n\nenum Sort {\n  ASC\n  DESC\n}\n\nenum AdminUiFilterType {\n  DATE_RANGE\n  ENUM\n  NUMERIC\n  RELATIONSHIP\n  TEXT\n  BOOLEAN\n}\n\nenum AggregationType {\n  COUNT\n}\n\nenum link__Purpose {\n  SECURITY\n  EXECUTION\n}\n\ntype AggregationResultFromMusicSubgraph {\n  count: Int!\n}\n\ninput DeleteOneFilterInput {\n  id: ID!\n}\n\ntype Query {\n  \"\"\"Get a single Artist.\"\"\"\n  artist(id: ID!): Artist\n  \"\"\"Get multiple Artists.\"\"\"\n  artists(filter: ArtistsListFilter, pagination: ArtistsPaginationInput): [Artist]\n  \"\"\"Get aggregated data for Artists.\"\"\"\n  artists_aggregate(filter: ArtistsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Genre.\"\"\"\n  genre(id: ID!): Genre\n  \"\"\"Get multiple Genres.\"\"\"\n  genres(filter: GenresListFilter, pagination: GenresPaginationInput): [Genre]\n  \"\"\"Get aggregated data for Genres.\"\"\"\n  genres_aggregate(filter: GenresListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Employee.\"\"\"\n  employee(id: ID!): Employee\n  \"\"\"Get multiple Employees.\"\"\"\n  employees(filter: EmployeesListFilter, pagination: EmployeesPaginationInput): [Employee]\n  \"\"\"Get aggregated data for Employees.\"\"\"\n  employees_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Customer.\"\"\"\n  customer(id: ID!): Customer\n  \"\"\"Get multiple Customers.\"\"\"\n  customers(filter: CustomersListFilter, pagination: CustomersPaginationInput): [Customer]\n  \"\"\"Get aggregated data for Customers.\"\"\"\n  customers_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Invoice.\"\"\"\n  invoice(id: ID!): Invoice\n  \"\"\"Get multiple Invoices.\"\"\"\n  invoices(filter: InvoicesListFilter, pagination: InvoicesPaginationInput): [Invoice]\n  \"\"\"Get aggregated data for Invoices.\"\"\"\n  invoices_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single InvoiceLine.\"\"\"\n  invoiceLine(id: ID!): InvoiceLine\n  \"\"\"Get multiple InvoiceLines.\"\"\"\n  invoiceLines(filter: InvoiceLinesListFilter, pagination: InvoiceLinesPaginationInput): [InvoiceLine]\n  \"\"\"Get aggregated data for InvoiceLines.\"\"\"\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single MediaType.\"\"\"\n  mediaType(id: ID!): MediaType\n  \"\"\"Get multiple MediaTypes.\"\"\"\n  mediaTypes(filter: MediaTypesListFilter, pagination: MediaTypesPaginationInput): [MediaType]\n  \"\"\"Get aggregated data for MediaTypes.\"\"\"\n  mediaTypes_aggregate(filter: MediaTypesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Playlist.\"\"\"\n  playlist(id: ID!): Playlist\n  \"\"\"Get multiple Playlists.\"\"\"\n  playlists(filter: PlaylistsListFilter, pagination: PlaylistsPaginationInput): [Playlist]\n  \"\"\"Get aggregated data for Playlists.\"\"\"\n  playlists_aggregate(filter: PlaylistsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Track.\"\"\"\n  track(id: ID!): Track\n  \"\"\"Get multiple Tracks.\"\"\"\n  tracks(filter: TracksListFilter, pagination: TracksPaginationInput): [Track]\n  \"\"\"Get aggregated data for Tracks.\"\"\"\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Album.\"\"\"\n  album(id: ID!): Album\n  \"\"\"Get multiple Albums.\"\"\"\n  albums(filter: AlbumsListFilter, pagination: AlbumsPaginationInput): [Album]\n  \"\"\"Get aggregated data for Albums.\"\"\"\n  albums_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Agent.\"\"\"\n  agent(id: ID!): Agent\n  \"\"\"Get multiple Agents.\"\"\"\n  agents(filter: AgentsListFilter, pagination: AgentsPaginationInput): [Agent]\n  \"\"\"Get a single Payment.\"\"\"\n  payment(id: ID!): Payment\n  \"\"\"Get multiple Payments.\"\"\"\n  payments(filter: PaymentsListFilter, pagination: PaymentsPaginationInput): [Payment]\n  \"\"\"Get aggregated data for Payments.\"\"\"\n  payments_aggregate(filter: PaymentsListFilter): AggregationResultFromPaymentsSubgraph\n  \"\"\"Get a single Trace.\"\"\"\n  trace(id: ID!): Trace\n  \"\"\"Get multiple Traces.\"\"\"\n  traces(filter: TracesListFilter, pagination: TracesPaginationInput): [Trace]\n  \"\"\"Get aggregated data for Traces.\"\"\"\n  traces_aggregate(filter: TracesListFilter): AggregationResultFromPaymentsSubgraph\n}\n\ntype Mutation {\n  \"\"\"Create a single Artist.\"\"\"\n  createArtist(input: ArtistInsertInput!): Artist\n  \"\"\"Create many Artists.\"\"\"\n  createArtists(input: [ArtistInsertInput!]!): [Artist]\n  \"\"\"Update a single Artist.\"\"\"\n  updateArtist(input: ArtistUpdateInput!): Artist\n  \"\"\"Update many Artists.\"\"\"\n  updateArtists(input: [ArtistUpdateInput!]!): [Artist]\n  \"\"\"Create or update many Artists.\"\"\"\n  createOrUpdateArtists(input: [ArtistCreateOrUpdateInput!]!): [Artist]\n  \"\"\"Delete a single Artist.\"\"\"\n  deleteArtist(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Artists with a filter.\"\"\"\n  deleteArtists(filter: ArtistsListFilter!): Boolean\n  \"\"\"Create a single Genre.\"\"\"\n  createGenre(input: GenreInsertInput!): Genre\n  \"\"\"Create many Genres.\"\"\"\n  createGenres(input: [GenreInsertInput!]!): [Genre]\n  \"\"\"Update a single Genre.\"\"\"\n  updateGenre(input: GenreUpdateInput!): Genre\n  \"\"\"Update many Genres.\"\"\"\n  updateGenres(input: [GenreUpdateInput!]!): [Genre]\n  \"\"\"Create or update many Genres.\"\"\"\n  createOrUpdateGenres(input: [GenreCreateOrUpdateInput!]!): [Genre]\n  \"\"\"Delete a single Genre.\"\"\"\n  deleteGenre(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Genres with a filter.\"\"\"\n  deleteGenres(filter: GenresListFilter!): Boolean\n  \"\"\"Create a single Employee.\"\"\"\n  createEmployee(input: EmployeeInsertInput!): Employee\n  \"\"\"Create many Employees.\"\"\"\n  createEmployees(input: [EmployeeInsertInput!]!): [Employee]\n  \"\"\"Update a single Employee.\"\"\"\n  updateEmployee(input: EmployeeUpdateInput!): Employee\n  \"\"\"Update many Employees.\"\"\"\n  updateEmployees(input: [EmployeeUpdateInput!]!): [Employee]\n  \"\"\"Create or update many Employees.\"\"\"\n  createOrUpdateEmployees(input: [EmployeeCreateOrUpdateInput!]!): [Employee]\n  \"\"\"Delete a single Employee.\"\"\"\n  deleteEmployee(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Employees with a filter.\"\"\"\n  deleteEmployees(filter: EmployeesListFilter!): Boolean\n  \"\"\"Create a single Customer.\"\"\"\n  createCustomer(input: CustomerInsertInput!): Customer\n  \"\"\"Create many Customers.\"\"\"\n  createCustomers(input: [CustomerInsertInput!]!): [Customer]\n  \"\"\"Update a single Customer.\"\"\"\n  updateCustomer(input: CustomerUpdateInput!): Customer\n  \"\"\"Update many Customers.\"\"\"\n  updateCustomers(input: [CustomerUpdateInput!]!): [Customer]\n  \"\"\"Create or update many Customers.\"\"\"\n  createOrUpdateCustomers(input: [CustomerCreateOrUpdateInput!]!): [Customer]\n  \"\"\"Delete a single Customer.\"\"\"\n  deleteCustomer(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Customers with a filter.\"\"\"\n  deleteCustomers(filter: CustomersListFilter!): Boolean\n  \"\"\"Create a single Invoice.\"\"\"\n  createInvoice(input: InvoiceInsertInput!): Invoice\n  \"\"\"Create many Invoices.\"\"\"\n  createInvoices(input: [InvoiceInsertInput!]!): [Invoice]\n  \"\"\"Update a single Invoice.\"\"\"\n  updateInvoice(input: InvoiceUpdateInput!): Invoice\n  \"\"\"Update many Invoices.\"\"\"\n  updateInvoices(input: [InvoiceUpdateInput!]!): [Invoice]\n  \"\"\"Create or update many Invoices.\"\"\"\n  createOrUpdateInvoices(input: [InvoiceCreateOrUpdateInput!]!): [Invoice]\n  \"\"\"Delete a single Invoice.\"\"\"\n  deleteInvoice(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Invoices with a filter.\"\"\"\n  deleteInvoices(filter: InvoicesListFilter!): Boolean\n  \"\"\"Create a single InvoiceLine.\"\"\"\n  createInvoiceLine(input: InvoiceLineInsertInput!): InvoiceLine\n  \"\"\"Create many InvoiceLines.\"\"\"\n  createInvoiceLines(input: [InvoiceLineInsertInput!]!): [InvoiceLine]\n  \"\"\"Update a single InvoiceLine.\"\"\"\n  updateInvoiceLine(input: InvoiceLineUpdateInput!): InvoiceLine\n  \"\"\"Update many InvoiceLines.\"\"\"\n  updateInvoiceLines(input: [InvoiceLineUpdateInput!]!): [InvoiceLine]\n  \"\"\"Create or update many InvoiceLines.\"\"\"\n  createOrUpdateInvoiceLines(input: [InvoiceLineCreateOrUpdateInput!]!): [InvoiceLine]\n  \"\"\"Delete a single InvoiceLine.\"\"\"\n  deleteInvoiceLine(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many InvoiceLines with a filter.\"\"\"\n  deleteInvoiceLines(filter: InvoiceLinesListFilter!): Boolean\n  \"\"\"Create a single MediaType.\"\"\"\n  createMediaType(input: MediaTypeInsertInput!): MediaType\n  \"\"\"Create many MediaTypes.\"\"\"\n  createMediaTypes(input: [MediaTypeInsertInput!]!): [MediaType]\n  \"\"\"Update a single MediaType.\"\"\"\n  updateMediaType(input: MediaTypeUpdateInput!): MediaType\n  \"\"\"Update many MediaTypes.\"\"\"\n  updateMediaTypes(input: [MediaTypeUpdateInput!]!): [MediaType]\n  \"\"\"Create or update many MediaTypes.\"\"\"\n  createOrUpdateMediaTypes(input: [MediaTypeCreateOrUpdateInput!]!): [MediaType]\n  \"\"\"Delete a single MediaType.\"\"\"\n  deleteMediaType(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many MediaTypes with a filter.\"\"\"\n  deleteMediaTypes(filter: MediaTypesListFilter!): Boolean\n  \"\"\"Create a single Playlist.\"\"\"\n  createPlaylist(input: PlaylistInsertInput!): Playlist\n  \"\"\"Create many Playlists.\"\"\"\n  createPlaylists(input: [PlaylistInsertInput!]!): [Playlist]\n  \"\"\"Update a single Playlist.\"\"\"\n  updatePlaylist(input: PlaylistUpdateInput!): Playlist\n  \"\"\"Update many Playlists.\"\"\"\n  updatePlaylists(input: [PlaylistUpdateInput!]!): [Playlist]\n  \"\"\"Create or update many Playlists.\"\"\"\n  createOrUpdatePlaylists(input: [PlaylistCreateOrUpdateInput!]!): [Playlist]\n  \"\"\"Delete a single Playlist.\"\"\"\n  deletePlaylist(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Playlists with a filter.\"\"\"\n  deletePlaylists(filter: PlaylistsListFilter!): Boolean\n  \"\"\"Create a single Track.\"\"\"\n  createTrack(input: TrackInsertInput!): Track\n  \"\"\"Create many Tracks.\"\"\"\n  createTracks(input: [TrackInsertInput!]!): [Track]\n  \"\"\"Update a single Track.\"\"\"\n  updateTrack(input: TrackUpdateInput!): Track\n  \"\"\"Update many Tracks.\"\"\"\n  updateTracks(input: [TrackUpdateInput!]!): [Track]\n  \"\"\"Create or update many Tracks.\"\"\"\n  createOrUpdateTracks(input: [TrackCreateOrUpdateInput!]!): [Track]\n  \"\"\"Delete a single Track.\"\"\"\n  deleteTrack(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Tracks with a filter.\"\"\"\n  deleteTracks(filter: TracksListFilter!): Boolean\n  \"\"\"Create a single Album.\"\"\"\n  createAlbum(input: AlbumInsertInput!): Album\n  \"\"\"Create many Albums.\"\"\"\n  createAlbums(input: [AlbumInsertInput!]!): [Album]\n  \"\"\"Update a single Album.\"\"\"\n  updateAlbum(input: AlbumUpdateInput!): Album\n  \"\"\"Update many Albums.\"\"\"\n  updateAlbums(input: [AlbumUpdateInput!]!): [Album]\n  \"\"\"Create or update many Albums.\"\"\"\n  createOrUpdateAlbums(input: [AlbumCreateOrUpdateInput!]!): [Album]\n  \"\"\"Delete a single Album.\"\"\"\n  deleteAlbum(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Albums with a filter.\"\"\"\n  deleteAlbums(filter: AlbumsListFilter!): Boolean\n  \"\"\"Create a single Agent.\"\"\"\n  createAgent(input: AgentInsertInput!): Agent\n  \"\"\"Create many Agents.\"\"\"\n  createAgents(input: [AgentInsertInput!]!): [Agent]\n  \"\"\"Update a single Agent.\"\"\"\n  updateAgent(input: AgentUpdateInput!): Agent\n  \"\"\"Update many Agents.\"\"\"\n  updateAgents(input: [AgentUpdateInput!]!): [Agent]\n  \"\"\"Create or update many Agents.\"\"\"\n  createOrUpdateAgents(input: [AgentCreateOrUpdateInput!]!): [Agent]\n  \"\"\"Delete a single Agent.\"\"\"\n  deleteAgent(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Agents with a filter.\"\"\"\n  deleteAgents(filter: AgentsListFilter!): Boolean\n  \"\"\"Create a single Payment.\"\"\"\n  createPayment(input: PaymentInsertInput!): Payment\n  \"\"\"Create many Payments.\"\"\"\n  createPayments(input: [PaymentInsertInput!]!): [Payment]\n  \"\"\"Update a single Payment.\"\"\"\n  updatePayment(input: PaymentUpdateInput!): Payment\n  \"\"\"Update many Payments.\"\"\"\n  updatePayments(input: [PaymentUpdateInput!]!): [Payment]\n  \"\"\"Create or update many Payments.\"\"\"\n  createOrUpdatePayments(input: [PaymentCreateOrUpdateInput!]!): [Payment]\n  \"\"\"Delete a single Payment.\"\"\"\n  deletePayment(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Payments with a filter.\"\"\"\n  deletePayments(filter: PaymentsListFilter!): Boolean\n}\n\nscalar link__Import\n\nscalar federation__FieldSet\n\ntype Agent {\n  id: ID!\n  name: String!\n  birthYear: String\n  gender: String\n  height: String\n}\n\ninput AgentsListFilter {\n  id: ID\n  id_in: [ID!]\n  id_nin: [ID!]\n  id_ne: ID\n  id_notnull: Boolean\n  id_null: Boolean\n  id_gt: ID\n  id_gte: ID\n  id_lt: ID\n  id_lte: ID\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  birthYear: String\n  birthYear_in: [String!]\n  birthYear_nin: [String!]\n  birthYear_ne: String\n  birthYear_notnull: Boolean\n  birthYear_null: Boolean\n  birthYear_like: String\n  birthYear_ilike: String\n  birthYear_gt: String\n  birthYear_gte: String\n  birthYear_lt: String\n  birthYear_lte: String\n  gender: String\n  gender_in: [String!]\n  gender_nin: [String!]\n  gender_ne: String\n  gender_notnull: Boolean\n  gender_null: Boolean\n  gender_like: String\n  gender_ilike: String\n  gender_gt: String\n  gender_gte: String\n  gender_lt: String\n  gender_lte: String\n  height: String\n  height_in: [String!]\n  height_nin: [String!]\n  height_ne: String\n  height_notnull: Boolean\n  height_null: Boolean\n  height_like: String\n  height_ilike: String\n  height_gt: String\n  height_gte: String\n  height_lt: String\n  height_lte: String\n}\n\n\"\"\"Data needed to create Agents.\"\"\"\ninput AgentInsertInput {\n  name: String!\n  birthYear: String\n  gender: String\n  height: String\n}\n\n\"\"\"Data needed to update Agents. An ID must be passed.\"\"\"\ninput AgentUpdateInput {\n  id: ID!\n  name: String\n  birthYear: String\n  gender: String\n  height: String\n}\n\n\"\"\"\nData needed to create or update Agents. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput AgentCreateOrUpdateInput {\n  id: ID\n  name: String\n  birthYear: String\n  gender: String\n  height: String\n}\n\n\"\"\"Pagination options for Agents.\"\"\"\ninput AgentsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: AgentsOrderByInput\n}\n\ninput AgentsOrderByInput {\n  id: Sort\n  name: Sort\n  birthYear: Sort\n  gender: Sort\n  height: Sort\n}\n\ntype Payment {\n  id: ID!\n  agentId: ID!\n  invoiceId: ID!\n  amount: String!\n  reconciled: Boolean!\n  notes: String\n  paymentMethod: String!\n  owner: Agent!\n  invoice: Invoice!\n}\n\ninput PaymentsListFilter {\n  id: ID\n  id_in: [ID!]\n  id_nin: [ID!]\n  id_ne: ID\n  id_notnull: Boolean\n  id_null: Boolean\n  id_gt: ID\n  id_gte: ID\n  id_lt: ID\n  id_lte: ID\n  agentId: ID\n  agentId_in: [ID!]\n  agentId_nin: [ID!]\n  agentId_ne: ID\n  agentId_notnull: Boolean\n  agentId_null: Boolean\n  agentId_gt: ID\n  agentId_gte: ID\n  agentId_lt: ID\n  agentId_lte: ID\n  invoiceId: ID\n  invoiceId_in: [ID!]\n  invoiceId_nin: [ID!]\n  invoiceId_ne: ID\n  invoiceId_notnull: Boolean\n  invoiceId_null: Boolean\n  invoiceId_gt: ID\n  invoiceId_gte: ID\n  invoiceId_lt: ID\n  invoiceId_lte: ID\n  amount: String\n  amount_in: [String!]\n  amount_nin: [String!]\n  amount_ne: String\n  amount_notnull: Boolean\n  amount_null: Boolean\n  amount_like: String\n  amount_ilike: String\n  amount_gt: String\n  amount_gte: String\n  amount_lt: String\n  amount_lte: String\n  reconciled: Boolean\n  reconciled_in: [Boolean!]\n  reconciled_nin: [Boolean!]\n  reconciled_ne: Boolean\n  reconciled_notnull: Boolean\n  reconciled_null: Boolean\n  notes: String\n  notes_in: [String!]\n  notes_nin: [String!]\n  notes_ne: String\n  notes_notnull: Boolean\n  notes_null: Boolean\n  notes_like: String\n  notes_ilike: String\n  notes_gt: String\n  notes_gte: String\n  notes_lt: String\n  notes_lte: String\n  paymentMethod: String\n  paymentMethod_in: [String!]\n  paymentMethod_nin: [String!]\n  paymentMethod_ne: String\n  paymentMethod_notnull: Boolean\n  paymentMethod_null: Boolean\n  paymentMethod_like: String\n  paymentMethod_ilike: String\n  paymentMethod_gt: String\n  paymentMethod_gte: String\n  paymentMethod_lt: String\n  paymentMethod_lte: String\n  owner: AgentsListFilter\n}\n\n\"\"\"Data needed to create Payments.\"\"\"\ninput PaymentInsertInput {\n  agentId: ID!\n  invoiceId: ID!\n  amount: String!\n  reconciled: Boolean!\n  notes: String\n  paymentMethod: String!\n  owner: AgentCreateOrUpdateInput\n}\n\n\"\"\"Data needed to update Payments. An ID must be passed.\"\"\"\ninput PaymentUpdateInput {\n  id: ID!\n  agentId: ID\n  invoiceId: ID\n  amount: String\n  reconciled: Boolean\n  notes: String\n  paymentMethod: String\n  owner: AgentCreateOrUpdateInput\n}\n\n\"\"\"\nData needed to create or update Payments. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput PaymentCreateOrUpdateInput {\n  id: ID\n  agentId: ID\n  invoiceId: ID\n  amount: String\n  reconciled: Boolean\n  notes: String\n  paymentMethod: String\n  owner: AgentCreateOrUpdateInput\n}\n\n\"\"\"Pagination options for Payments.\"\"\"\ninput PaymentsPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: PaymentsOrderByInput\n}\n\ninput PaymentsOrderByInput {\n  id: Sort\n  agentId: Sort\n  invoiceId: Sort\n  amount: Sort\n  reconciled: Sort\n  notes: Sort\n  paymentMethod: Sort\n}\n\ntype Trace {\n  id: ID!\n  spanId: String!\n  parentId: String\n  name: String!\n  timestamp: NanoTimestamp!\n  duration: NanoDuration!\n  traceId: String!\n  attributes: JSON!\n}\n\n\"\"\"A timestamp in nanoseconds\"\"\"\nscalar NanoTimestamp\n\n\"\"\"A duration in nanoseconds\"\"\"\nscalar NanoDuration\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n\ninput TracesListFilter {\n  id: ID\n  id_in: [ID!]\n  id_nin: [ID!]\n  id_ne: ID\n  id_notnull: Boolean\n  id_null: Boolean\n  id_gt: ID\n  id_gte: ID\n  id_lt: ID\n  id_lte: ID\n  spanId: String\n  spanId_in: [String!]\n  spanId_nin: [String!]\n  spanId_ne: String\n  spanId_notnull: Boolean\n  spanId_null: Boolean\n  spanId_like: String\n  spanId_ilike: String\n  spanId_gt: String\n  spanId_gte: String\n  spanId_lt: String\n  spanId_lte: String\n  parentId: String\n  parentId_in: [String!]\n  parentId_nin: [String!]\n  parentId_ne: String\n  parentId_notnull: Boolean\n  parentId_null: Boolean\n  parentId_like: String\n  parentId_ilike: String\n  parentId_gt: String\n  parentId_gte: String\n  parentId_lt: String\n  parentId_lte: String\n  name: String\n  name_in: [String!]\n  name_nin: [String!]\n  name_ne: String\n  name_notnull: Boolean\n  name_null: Boolean\n  name_like: String\n  name_ilike: String\n  name_gt: String\n  name_gte: String\n  name_lt: String\n  name_lte: String\n  timestamp: NanoTimestamp\n  timestamp_in: [NanoTimestamp!]\n  timestamp_nin: [NanoTimestamp!]\n  timestamp_ne: NanoTimestamp\n  timestamp_notnull: Boolean\n  timestamp_null: Boolean\n  timestamp_gt: NanoTimestamp\n  timestamp_gte: NanoTimestamp\n  timestamp_lt: NanoTimestamp\n  timestamp_lte: NanoTimestamp\n  duration: NanoDuration\n  duration_in: [NanoDuration!]\n  duration_nin: [NanoDuration!]\n  duration_ne: NanoDuration\n  duration_notnull: Boolean\n  duration_null: Boolean\n  duration_gt: NanoDuration\n  duration_gte: NanoDuration\n  duration_lt: NanoDuration\n  duration_lte: NanoDuration\n  traceId: String\n  traceId_in: [String!]\n  traceId_nin: [String!]\n  traceId_ne: String\n  traceId_notnull: Boolean\n  traceId_null: Boolean\n  traceId_like: String\n  traceId_ilike: String\n  traceId_gt: String\n  traceId_gte: String\n  traceId_lt: String\n  traceId_lte: String\n  attributes: JSON\n  attributes_in: [JSON!]\n  attributes_nin: [JSON!]\n  attributes_ne: JSON\n  attributes_notnull: Boolean\n  attributes_null: Boolean\n}\n\n\"\"\"Pagination options for Traces.\"\"\"\ninput TracesPaginationInput {\n  offset: Int\n  limit: Int\n  orderBy: TracesOrderByInput\n}\n\ninput TracesOrderByInput {\n  id: Sort\n  spanId: Sort\n  parentId: Sort\n  name: Sort\n  timestamp: Sort\n  duration: Sort\n  traceId: Sort\n  attributes: Sort\n}\n\ntype AggregationResultFromPaymentsSubgraph {\n  count: Int!\n}","stringStorage":{"557ad44506cf4dcd4ac7eae835790c0bd0e58b4f":"schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@extends\", \"@external\", \"@inaccessible\", \"@interfaceObject\", \"@key\", \"@override\", \"@provides\", \"@requires\", \"@shareable\", \"@tag\"]) {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nenum AdminUiFilterType {\n  BOOLEAN\n  DATE_RANGE\n  ENUM\n  NUMERIC\n  RELATIONSHIP\n  TEXT\n}\n\ntype AggregationResultFromMusicSubgraph {\n  count: Int!\n}\n\nenum AggregationType {\n  COUNT\n}\n\ntype Album @key(fields: \"albumId\") {\n  albumId: ID!\n  artist(filter: ArtistsListFilter): Artist!\n  artist_aggregate(filter: ArtistsListFilter): AggregationResultFromMusicSubgraph\n  title: String!\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\n\"\"\"\nData needed to create or update Albums. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput AlbumCreateOrUpdateInput {\n  albumId: ID\n  artist: ArtistCreateOrUpdateInput\n  title: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to create Albums.\"\"\"\ninput AlbumInsertInput {\n  artist: ArtistCreateOrUpdateInput\n  title: String!\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Albums. An ID must be passed.\"\"\"\ninput AlbumUpdateInput {\n  albumId: ID!\n  artist: ArtistCreateOrUpdateInput\n  title: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\ninput AlbumsListFilter {\n  albumId: ID\n  albumId_gt: ID\n  albumId_gte: ID\n  albumId_in: [ID!]\n  albumId_lt: ID\n  albumId_lte: ID\n  albumId_ne: ID\n  albumId_nin: [ID!]\n  albumId_notnull: Boolean\n  albumId_null: Boolean\n  artist: ArtistsListFilter\n  title: String\n  title_gt: String\n  title_gte: String\n  title_ilike: String\n  title_in: [String!]\n  title_like: String\n  title_lt: String\n  title_lte: String\n  title_ne: String\n  title_nin: [String!]\n  title_notnull: Boolean\n  title_null: Boolean\n  tracks: TracksListFilter\n}\n\ninput AlbumsOrderByInput {\n  albumId: Sort\n  title: Sort\n}\n\n\"\"\"Pagination options for Albums.\"\"\"\ninput AlbumsPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: AlbumsOrderByInput\n}\n\ntype Artist @key(fields: \"artistId\") {\n  albums(filter: AlbumsListFilter): [Album!]!\n  albums_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  artistId: ID!\n  name: String\n}\n\n\"\"\"\nData needed to create or update Artists. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput ArtistCreateOrUpdateInput {\n  albums: [AlbumCreateOrUpdateInput!]\n  artistId: ID\n  name: String\n}\n\n\"\"\"Data needed to create Artists.\"\"\"\ninput ArtistInsertInput {\n  albums: [AlbumCreateOrUpdateInput!]\n  name: String\n}\n\n\"\"\"Data needed to update Artists. An ID must be passed.\"\"\"\ninput ArtistUpdateInput {\n  albums: [AlbumCreateOrUpdateInput!]\n  artistId: ID!\n  name: String\n}\n\ninput ArtistsListFilter {\n  albums: AlbumsListFilter\n  artistId: ID\n  artistId_gt: ID\n  artistId_gte: ID\n  artistId_in: [ID!]\n  artistId_lt: ID\n  artistId_lte: ID\n  artistId_ne: ID\n  artistId_nin: [ID!]\n  artistId_notnull: Boolean\n  artistId_null: Boolean\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n}\n\ninput ArtistsOrderByInput {\n  artistId: Sort\n  name: Sort\n}\n\n\"\"\"Pagination options for Artists.\"\"\"\ninput ArtistsPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: ArtistsOrderByInput\n}\n\ntype Customer @key(fields: \"customerId\") {\n  address: String\n  city: String\n  company: String\n  country: String\n  customerId: ID!\n  email: String!\n  employee(filter: EmployeesListFilter): Employee\n  employee_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  fax: String\n  firstName: String!\n  invoices(filter: InvoicesListFilter): [Invoice!]!\n  invoices_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  lastName: String!\n  phone: String\n  postalCode: String\n  state: String\n}\n\n\"\"\"\nData needed to create or update Customers. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput CustomerCreateOrUpdateInput {\n  address: String\n  city: String\n  company: String\n  country: String\n  customerId: ID\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  fax: String\n  firstName: String\n  invoices: [InvoiceCreateOrUpdateInput!]\n  lastName: String\n  phone: String\n  postalCode: String\n  state: String\n}\n\n\"\"\"Data needed to create Customers.\"\"\"\ninput CustomerInsertInput {\n  address: String\n  city: String\n  company: String\n  country: String\n  email: String!\n  employee: EmployeeCreateOrUpdateInput\n  fax: String\n  firstName: String!\n  invoices: [InvoiceCreateOrUpdateInput!]\n  lastName: String!\n  phone: String\n  postalCode: String\n  state: String\n}\n\n\"\"\"Data needed to update Customers. An ID must be passed.\"\"\"\ninput CustomerUpdateInput {\n  address: String\n  city: String\n  company: String\n  country: String\n  customerId: ID!\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  fax: String\n  firstName: String\n  invoices: [InvoiceCreateOrUpdateInput!]\n  lastName: String\n  phone: String\n  postalCode: String\n  state: String\n}\n\ninput CustomersListFilter {\n  address: String\n  address_gt: String\n  address_gte: String\n  address_ilike: String\n  address_in: [String!]\n  address_like: String\n  address_lt: String\n  address_lte: String\n  address_ne: String\n  address_nin: [String!]\n  address_notnull: Boolean\n  address_null: Boolean\n  city: String\n  city_gt: String\n  city_gte: String\n  city_ilike: String\n  city_in: [String!]\n  city_like: String\n  city_lt: String\n  city_lte: String\n  city_ne: String\n  city_nin: [String!]\n  city_notnull: Boolean\n  city_null: Boolean\n  company: String\n  company_gt: String\n  company_gte: String\n  company_ilike: String\n  company_in: [String!]\n  company_like: String\n  company_lt: String\n  company_lte: String\n  company_ne: String\n  company_nin: [String!]\n  company_notnull: Boolean\n  company_null: Boolean\n  country: String\n  country_gt: String\n  country_gte: String\n  country_ilike: String\n  country_in: [String!]\n  country_like: String\n  country_lt: String\n  country_lte: String\n  country_ne: String\n  country_nin: [String!]\n  country_notnull: Boolean\n  country_null: Boolean\n  customerId: ID\n  customerId_gt: ID\n  customerId_gte: ID\n  customerId_in: [ID!]\n  customerId_lt: ID\n  customerId_lte: ID\n  customerId_ne: ID\n  customerId_nin: [ID!]\n  customerId_notnull: Boolean\n  customerId_null: Boolean\n  email: String\n  email_gt: String\n  email_gte: String\n  email_ilike: String\n  email_in: [String!]\n  email_like: String\n  email_lt: String\n  email_lte: String\n  email_ne: String\n  email_nin: [String!]\n  email_notnull: Boolean\n  email_null: Boolean\n  employee: EmployeesListFilter\n  fax: String\n  fax_gt: String\n  fax_gte: String\n  fax_ilike: String\n  fax_in: [String!]\n  fax_like: String\n  fax_lt: String\n  fax_lte: String\n  fax_ne: String\n  fax_nin: [String!]\n  fax_notnull: Boolean\n  fax_null: Boolean\n  firstName: String\n  firstName_gt: String\n  firstName_gte: String\n  firstName_ilike: String\n  firstName_in: [String!]\n  firstName_like: String\n  firstName_lt: String\n  firstName_lte: String\n  firstName_ne: String\n  firstName_nin: [String!]\n  firstName_notnull: Boolean\n  firstName_null: Boolean\n  invoices: InvoicesListFilter\n  lastName: String\n  lastName_gt: String\n  lastName_gte: String\n  lastName_ilike: String\n  lastName_in: [String!]\n  lastName_like: String\n  lastName_lt: String\n  lastName_lte: String\n  lastName_ne: String\n  lastName_nin: [String!]\n  lastName_notnull: Boolean\n  lastName_null: Boolean\n  phone: String\n  phone_gt: String\n  phone_gte: String\n  phone_ilike: String\n  phone_in: [String!]\n  phone_like: String\n  phone_lt: String\n  phone_lte: String\n  phone_ne: String\n  phone_nin: [String!]\n  phone_notnull: Boolean\n  phone_null: Boolean\n  postalCode: String\n  postalCode_gt: String\n  postalCode_gte: String\n  postalCode_ilike: String\n  postalCode_in: [String!]\n  postalCode_like: String\n  postalCode_lt: String\n  postalCode_lte: String\n  postalCode_ne: String\n  postalCode_nin: [String!]\n  postalCode_notnull: Boolean\n  postalCode_null: Boolean\n  state: String\n  state_gt: String\n  state_gte: String\n  state_ilike: String\n  state_in: [String!]\n  state_like: String\n  state_lt: String\n  state_lte: String\n  state_ne: String\n  state_nin: [String!]\n  state_notnull: Boolean\n  state_null: Boolean\n}\n\ninput CustomersOrderByInput {\n  address: Sort\n  city: Sort\n  company: Sort\n  country: Sort\n  customerId: Sort\n  email: Sort\n  fax: Sort\n  firstName: Sort\n  lastName: Sort\n  phone: Sort\n  postalCode: Sort\n  state: Sort\n}\n\n\"\"\"Pagination options for Customers.\"\"\"\ninput CustomersPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: CustomersOrderByInput\n}\n\ninput DeleteOneFilterInput {\n  id: ID!\n}\n\ntype Employee @key(fields: \"employeeId\") {\n  address: String\n  birthDate: ISOString\n  city: String\n  country: String\n  customers(filter: CustomersListFilter): [Customer!]!\n  customers_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  email: String\n  employee(filter: EmployeesListFilter): Employee\n  employeeId: ID!\n  employee_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  employees(filter: EmployeesListFilter): [Employee!]!\n  employees_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  fax: String\n  firstName: String!\n  hireDate: ISOString\n  lastName: String!\n  phone: String\n  postalCode: String\n  state: String\n  title: String\n}\n\n\"\"\"\nData needed to create or update Employees. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput EmployeeCreateOrUpdateInput {\n  address: String\n  birthDate: ISOString\n  city: String\n  country: String\n  customers: [CustomerCreateOrUpdateInput!]\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  employeeId: ID\n  employees: [EmployeeCreateOrUpdateInput!]\n  fax: String\n  firstName: String\n  hireDate: ISOString\n  lastName: String\n  phone: String\n  postalCode: String\n  state: String\n  title: String\n}\n\n\"\"\"Data needed to create Employees.\"\"\"\ninput EmployeeInsertInput {\n  address: String\n  birthDate: ISOString\n  city: String\n  country: String\n  customers: [CustomerCreateOrUpdateInput!]\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  employees: [EmployeeCreateOrUpdateInput!]\n  fax: String\n  firstName: String!\n  hireDate: ISOString\n  lastName: String!\n  phone: String\n  postalCode: String\n  state: String\n  title: String\n}\n\n\"\"\"Data needed to update Employees. An ID must be passed.\"\"\"\ninput EmployeeUpdateInput {\n  address: String\n  birthDate: ISOString\n  city: String\n  country: String\n  customers: [CustomerCreateOrUpdateInput!]\n  email: String\n  employee: EmployeeCreateOrUpdateInput\n  employeeId: ID!\n  employees: [EmployeeCreateOrUpdateInput!]\n  fax: String\n  firstName: String\n  hireDate: ISOString\n  lastName: String\n  phone: String\n  postalCode: String\n  state: String\n  title: String\n}\n\ninput EmployeesListFilter {\n  address: String\n  address_gt: String\n  address_gte: String\n  address_ilike: String\n  address_in: [String!]\n  address_like: String\n  address_lt: String\n  address_lte: String\n  address_ne: String\n  address_nin: [String!]\n  address_notnull: Boolean\n  address_null: Boolean\n  birthDate: ISOString\n  birthDate_gt: ISOString\n  birthDate_gte: ISOString\n  birthDate_in: [ISOString!]\n  birthDate_lt: ISOString\n  birthDate_lte: ISOString\n  birthDate_ne: ISOString\n  birthDate_nin: [ISOString!]\n  birthDate_notnull: Boolean\n  birthDate_null: Boolean\n  city: String\n  city_gt: String\n  city_gte: String\n  city_ilike: String\n  city_in: [String!]\n  city_like: String\n  city_lt: String\n  city_lte: String\n  city_ne: String\n  city_nin: [String!]\n  city_notnull: Boolean\n  city_null: Boolean\n  country: String\n  country_gt: String\n  country_gte: String\n  country_ilike: String\n  country_in: [String!]\n  country_like: String\n  country_lt: String\n  country_lte: String\n  country_ne: String\n  country_nin: [String!]\n  country_notnull: Boolean\n  country_null: Boolean\n  customers: CustomersListFilter\n  email: String\n  email_gt: String\n  email_gte: String\n  email_ilike: String\n  email_in: [String!]\n  email_like: String\n  email_lt: String\n  email_lte: String\n  email_ne: String\n  email_nin: [String!]\n  email_notnull: Boolean\n  email_null: Boolean\n  employee: EmployeesListFilter\n  employeeId: ID\n  employeeId_gt: ID\n  employeeId_gte: ID\n  employeeId_in: [ID!]\n  employeeId_lt: ID\n  employeeId_lte: ID\n  employeeId_ne: ID\n  employeeId_nin: [ID!]\n  employeeId_notnull: Boolean\n  employeeId_null: Boolean\n  employees: EmployeesListFilter\n  fax: String\n  fax_gt: String\n  fax_gte: String\n  fax_ilike: String\n  fax_in: [String!]\n  fax_like: String\n  fax_lt: String\n  fax_lte: String\n  fax_ne: String\n  fax_nin: [String!]\n  fax_notnull: Boolean\n  fax_null: Boolean\n  firstName: String\n  firstName_gt: String\n  firstName_gte: String\n  firstName_ilike: String\n  firstName_in: [String!]\n  firstName_like: String\n  firstName_lt: String\n  firstName_lte: String\n  firstName_ne: String\n  firstName_nin: [String!]\n  firstName_notnull: Boolean\n  firstName_null: Boolean\n  hireDate: ISOString\n  hireDate_gt: ISOString\n  hireDate_gte: ISOString\n  hireDate_in: [ISOString!]\n  hireDate_lt: ISOString\n  hireDate_lte: ISOString\n  hireDate_ne: ISOString\n  hireDate_nin: [ISOString!]\n  hireDate_notnull: Boolean\n  hireDate_null: Boolean\n  lastName: String\n  lastName_gt: String\n  lastName_gte: String\n  lastName_ilike: String\n  lastName_in: [String!]\n  lastName_like: String\n  lastName_lt: String\n  lastName_lte: String\n  lastName_ne: String\n  lastName_nin: [String!]\n  lastName_notnull: Boolean\n  lastName_null: Boolean\n  phone: String\n  phone_gt: String\n  phone_gte: String\n  phone_ilike: String\n  phone_in: [String!]\n  phone_like: String\n  phone_lt: String\n  phone_lte: String\n  phone_ne: String\n  phone_nin: [String!]\n  phone_notnull: Boolean\n  phone_null: Boolean\n  postalCode: String\n  postalCode_gt: String\n  postalCode_gte: String\n  postalCode_ilike: String\n  postalCode_in: [String!]\n  postalCode_like: String\n  postalCode_lt: String\n  postalCode_lte: String\n  postalCode_ne: String\n  postalCode_nin: [String!]\n  postalCode_notnull: Boolean\n  postalCode_null: Boolean\n  state: String\n  state_gt: String\n  state_gte: String\n  state_ilike: String\n  state_in: [String!]\n  state_like: String\n  state_lt: String\n  state_lte: String\n  state_ne: String\n  state_nin: [String!]\n  state_notnull: Boolean\n  state_null: Boolean\n  title: String\n  title_gt: String\n  title_gte: String\n  title_ilike: String\n  title_in: [String!]\n  title_like: String\n  title_lt: String\n  title_lte: String\n  title_ne: String\n  title_nin: [String!]\n  title_notnull: Boolean\n  title_null: Boolean\n}\n\ninput EmployeesOrderByInput {\n  address: Sort\n  birthDate: Sort\n  city: Sort\n  country: Sort\n  email: Sort\n  employeeId: Sort\n  fax: Sort\n  firstName: Sort\n  hireDate: Sort\n  lastName: Sort\n  phone: Sort\n  postalCode: Sort\n  state: Sort\n  title: Sort\n}\n\n\"\"\"Pagination options for Employees.\"\"\"\ninput EmployeesPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: EmployeesOrderByInput\n}\n\ntype Genre @key(fields: \"genreId\") {\n  genreId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\n\"\"\"\nData needed to create or update Genres. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput GenreCreateOrUpdateInput {\n  genreId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to create Genres.\"\"\"\ninput GenreInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Genres. An ID must be passed.\"\"\"\ninput GenreUpdateInput {\n  genreId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\ninput GenresListFilter {\n  genreId: ID\n  genreId_gt: ID\n  genreId_gte: ID\n  genreId_in: [ID!]\n  genreId_lt: ID\n  genreId_lte: ID\n  genreId_ne: ID\n  genreId_nin: [ID!]\n  genreId_notnull: Boolean\n  genreId_null: Boolean\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n  tracks: TracksListFilter\n}\n\ninput GenresOrderByInput {\n  genreId: Sort\n  name: Sort\n}\n\n\"\"\"Pagination options for Genres.\"\"\"\ninput GenresPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: GenresOrderByInput\n}\n\n\"\"\"\nReturns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".\n\"\"\"\nscalar ISOString\n\ntype Invoice @key(fields: \"invoiceId\") {\n  billingAddress: String\n  billingCity: String\n  billingCountry: String\n  billingPostalCode: String\n  billingState: String\n  customer(filter: CustomersListFilter): Customer!\n  customer_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  invoiceDate: ISOString!\n  invoiceId: ID!\n  invoiceLines(filter: InvoiceLinesListFilter): [InvoiceLine!]!\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  total: String!\n}\n\n\"\"\"\nData needed to create or update Invoices. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput InvoiceCreateOrUpdateInput {\n  billingAddress: String\n  billingCity: String\n  billingCountry: String\n  billingPostalCode: String\n  billingState: String\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString\n  invoiceId: ID\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  total: String\n}\n\n\"\"\"Data needed to create Invoices.\"\"\"\ninput InvoiceInsertInput {\n  billingAddress: String\n  billingCity: String\n  billingCountry: String\n  billingPostalCode: String\n  billingState: String\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString!\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  total: String!\n}\n\ntype InvoiceLine @key(fields: \"invoiceLineId\") {\n  invoice(filter: InvoicesListFilter): Invoice!\n  invoiceLineId: ID!\n  invoice_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  quantity: Float!\n  track(filter: TracksListFilter): Track!\n  track_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n  unitPrice: String!\n}\n\n\"\"\"\nData needed to create or update InvoiceLines. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput InvoiceLineCreateOrUpdateInput {\n  invoice: InvoiceCreateOrUpdateInput\n  invoiceLineId: ID\n  quantity: Float\n  track: TrackCreateOrUpdateInput\n  unitPrice: String\n}\n\n\"\"\"Data needed to create InvoiceLines.\"\"\"\ninput InvoiceLineInsertInput {\n  invoice: InvoiceCreateOrUpdateInput\n  quantity: Float!\n  track: TrackCreateOrUpdateInput\n  unitPrice: String!\n}\n\n\"\"\"Data needed to update InvoiceLines. An ID must be passed.\"\"\"\ninput InvoiceLineUpdateInput {\n  invoice: InvoiceCreateOrUpdateInput\n  invoiceLineId: ID!\n  quantity: Float\n  track: TrackCreateOrUpdateInput\n  unitPrice: String\n}\n\ninput InvoiceLinesListFilter {\n  invoice: InvoicesListFilter\n  invoiceLineId: ID\n  invoiceLineId_gt: ID\n  invoiceLineId_gte: ID\n  invoiceLineId_in: [ID!]\n  invoiceLineId_lt: ID\n  invoiceLineId_lte: ID\n  invoiceLineId_ne: ID\n  invoiceLineId_nin: [ID!]\n  invoiceLineId_notnull: Boolean\n  invoiceLineId_null: Boolean\n  quantity: Float\n  quantity_in: [Float!]\n  quantity_ne: Float\n  quantity_nin: [Float!]\n  quantity_notnull: Boolean\n  quantity_null: Boolean\n  track: TracksListFilter\n  unitPrice: String\n  unitPrice_gt: String\n  unitPrice_gte: String\n  unitPrice_ilike: String\n  unitPrice_in: [String!]\n  unitPrice_like: String\n  unitPrice_lt: String\n  unitPrice_lte: String\n  unitPrice_ne: String\n  unitPrice_nin: [String!]\n  unitPrice_notnull: Boolean\n  unitPrice_null: Boolean\n}\n\ninput InvoiceLinesOrderByInput {\n  invoiceLineId: Sort\n  quantity: Sort\n  unitPrice: Sort\n}\n\n\"\"\"Pagination options for InvoiceLines.\"\"\"\ninput InvoiceLinesPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: InvoiceLinesOrderByInput\n}\n\n\"\"\"Data needed to update Invoices. An ID must be passed.\"\"\"\ninput InvoiceUpdateInput {\n  billingAddress: String\n  billingCity: String\n  billingCountry: String\n  billingPostalCode: String\n  billingState: String\n  customer: CustomerCreateOrUpdateInput\n  invoiceDate: ISOString\n  invoiceId: ID!\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  total: String\n}\n\ninput InvoicesListFilter {\n  billingAddress: String\n  billingAddress_gt: String\n  billingAddress_gte: String\n  billingAddress_ilike: String\n  billingAddress_in: [String!]\n  billingAddress_like: String\n  billingAddress_lt: String\n  billingAddress_lte: String\n  billingAddress_ne: String\n  billingAddress_nin: [String!]\n  billingAddress_notnull: Boolean\n  billingAddress_null: Boolean\n  billingCity: String\n  billingCity_gt: String\n  billingCity_gte: String\n  billingCity_ilike: String\n  billingCity_in: [String!]\n  billingCity_like: String\n  billingCity_lt: String\n  billingCity_lte: String\n  billingCity_ne: String\n  billingCity_nin: [String!]\n  billingCity_notnull: Boolean\n  billingCity_null: Boolean\n  billingCountry: String\n  billingCountry_gt: String\n  billingCountry_gte: String\n  billingCountry_ilike: String\n  billingCountry_in: [String!]\n  billingCountry_like: String\n  billingCountry_lt: String\n  billingCountry_lte: String\n  billingCountry_ne: String\n  billingCountry_nin: [String!]\n  billingCountry_notnull: Boolean\n  billingCountry_null: Boolean\n  billingPostalCode: String\n  billingPostalCode_gt: String\n  billingPostalCode_gte: String\n  billingPostalCode_ilike: String\n  billingPostalCode_in: [String!]\n  billingPostalCode_like: String\n  billingPostalCode_lt: String\n  billingPostalCode_lte: String\n  billingPostalCode_ne: String\n  billingPostalCode_nin: [String!]\n  billingPostalCode_notnull: Boolean\n  billingPostalCode_null: Boolean\n  billingState: String\n  billingState_gt: String\n  billingState_gte: String\n  billingState_ilike: String\n  billingState_in: [String!]\n  billingState_like: String\n  billingState_lt: String\n  billingState_lte: String\n  billingState_ne: String\n  billingState_nin: [String!]\n  billingState_notnull: Boolean\n  billingState_null: Boolean\n  customer: CustomersListFilter\n  invoiceDate: ISOString\n  invoiceDate_gt: ISOString\n  invoiceDate_gte: ISOString\n  invoiceDate_in: [ISOString!]\n  invoiceDate_lt: ISOString\n  invoiceDate_lte: ISOString\n  invoiceDate_ne: ISOString\n  invoiceDate_nin: [ISOString!]\n  invoiceDate_notnull: Boolean\n  invoiceDate_null: Boolean\n  invoiceId: ID\n  invoiceId_gt: ID\n  invoiceId_gte: ID\n  invoiceId_in: [ID!]\n  invoiceId_lt: ID\n  invoiceId_lte: ID\n  invoiceId_ne: ID\n  invoiceId_nin: [ID!]\n  invoiceId_notnull: Boolean\n  invoiceId_null: Boolean\n  invoiceLines: InvoiceLinesListFilter\n  total: String\n  total_gt: String\n  total_gte: String\n  total_ilike: String\n  total_in: [String!]\n  total_like: String\n  total_lt: String\n  total_lte: String\n  total_ne: String\n  total_nin: [String!]\n  total_notnull: Boolean\n  total_null: Boolean\n}\n\ninput InvoicesOrderByInput {\n  billingAddress: Sort\n  billingCity: Sort\n  billingCountry: Sort\n  billingPostalCode: Sort\n  billingState: Sort\n  invoiceDate: Sort\n  invoiceId: Sort\n  total: Sort\n}\n\n\"\"\"Pagination options for Invoices.\"\"\"\ninput InvoicesPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: InvoicesOrderByInput\n}\n\ntype MediaType @key(fields: \"mediaTypeId\") {\n  mediaTypeId: ID!\n  name: String\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\n\"\"\"\nData needed to create or update MediaTypes. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput MediaTypeCreateOrUpdateInput {\n  mediaTypeId: ID\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to create MediaTypes.\"\"\"\ninput MediaTypeInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update MediaTypes. An ID must be passed.\"\"\"\ninput MediaTypeUpdateInput {\n  mediaTypeId: ID!\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\ninput MediaTypesListFilter {\n  mediaTypeId: ID\n  mediaTypeId_gt: ID\n  mediaTypeId_gte: ID\n  mediaTypeId_in: [ID!]\n  mediaTypeId_lt: ID\n  mediaTypeId_lte: ID\n  mediaTypeId_ne: ID\n  mediaTypeId_nin: [ID!]\n  mediaTypeId_notnull: Boolean\n  mediaTypeId_null: Boolean\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n  tracks: TracksListFilter\n}\n\ninput MediaTypesOrderByInput {\n  mediaTypeId: Sort\n  name: Sort\n}\n\n\"\"\"Pagination options for MediaTypes.\"\"\"\ninput MediaTypesPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: MediaTypesOrderByInput\n}\n\ntype Mutation {\n  \"\"\"Create a single Album.\"\"\"\n  createAlbum(input: AlbumInsertInput!): Album\n  \"\"\"Create many Albums.\"\"\"\n  createAlbums(input: [AlbumInsertInput!]!): [Album]\n  \"\"\"Create a single Artist.\"\"\"\n  createArtist(input: ArtistInsertInput!): Artist\n  \"\"\"Create many Artists.\"\"\"\n  createArtists(input: [ArtistInsertInput!]!): [Artist]\n  \"\"\"Create a single Customer.\"\"\"\n  createCustomer(input: CustomerInsertInput!): Customer\n  \"\"\"Create many Customers.\"\"\"\n  createCustomers(input: [CustomerInsertInput!]!): [Customer]\n  \"\"\"Create a single Employee.\"\"\"\n  createEmployee(input: EmployeeInsertInput!): Employee\n  \"\"\"Create many Employees.\"\"\"\n  createEmployees(input: [EmployeeInsertInput!]!): [Employee]\n  \"\"\"Create a single Genre.\"\"\"\n  createGenre(input: GenreInsertInput!): Genre\n  \"\"\"Create many Genres.\"\"\"\n  createGenres(input: [GenreInsertInput!]!): [Genre]\n  \"\"\"Create a single Invoice.\"\"\"\n  createInvoice(input: InvoiceInsertInput!): Invoice\n  \"\"\"Create a single InvoiceLine.\"\"\"\n  createInvoiceLine(input: InvoiceLineInsertInput!): InvoiceLine\n  \"\"\"Create many InvoiceLines.\"\"\"\n  createInvoiceLines(input: [InvoiceLineInsertInput!]!): [InvoiceLine]\n  \"\"\"Create many Invoices.\"\"\"\n  createInvoices(input: [InvoiceInsertInput!]!): [Invoice]\n  \"\"\"Create a single MediaType.\"\"\"\n  createMediaType(input: MediaTypeInsertInput!): MediaType\n  \"\"\"Create many MediaTypes.\"\"\"\n  createMediaTypes(input: [MediaTypeInsertInput!]!): [MediaType]\n  \"\"\"Create or update many Albums.\"\"\"\n  createOrUpdateAlbums(input: [AlbumCreateOrUpdateInput!]!): [Album]\n  \"\"\"Create or update many Artists.\"\"\"\n  createOrUpdateArtists(input: [ArtistCreateOrUpdateInput!]!): [Artist]\n  \"\"\"Create or update many Customers.\"\"\"\n  createOrUpdateCustomers(input: [CustomerCreateOrUpdateInput!]!): [Customer]\n  \"\"\"Create or update many Employees.\"\"\"\n  createOrUpdateEmployees(input: [EmployeeCreateOrUpdateInput!]!): [Employee]\n  \"\"\"Create or update many Genres.\"\"\"\n  createOrUpdateGenres(input: [GenreCreateOrUpdateInput!]!): [Genre]\n  \"\"\"Create or update many InvoiceLines.\"\"\"\n  createOrUpdateInvoiceLines(input: [InvoiceLineCreateOrUpdateInput!]!): [InvoiceLine]\n  \"\"\"Create or update many Invoices.\"\"\"\n  createOrUpdateInvoices(input: [InvoiceCreateOrUpdateInput!]!): [Invoice]\n  \"\"\"Create or update many MediaTypes.\"\"\"\n  createOrUpdateMediaTypes(input: [MediaTypeCreateOrUpdateInput!]!): [MediaType]\n  \"\"\"Create or update many Playlists.\"\"\"\n  createOrUpdatePlaylists(input: [PlaylistCreateOrUpdateInput!]!): [Playlist]\n  \"\"\"Create or update many Tracks.\"\"\"\n  createOrUpdateTracks(input: [TrackCreateOrUpdateInput!]!): [Track]\n  \"\"\"Create a single Playlist.\"\"\"\n  createPlaylist(input: PlaylistInsertInput!): Playlist\n  \"\"\"Create many Playlists.\"\"\"\n  createPlaylists(input: [PlaylistInsertInput!]!): [Playlist]\n  \"\"\"Create a single Track.\"\"\"\n  createTrack(input: TrackInsertInput!): Track\n  \"\"\"Create many Tracks.\"\"\"\n  createTracks(input: [TrackInsertInput!]!): [Track]\n  \"\"\"Delete a single Album.\"\"\"\n  deleteAlbum(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Albums with a filter.\"\"\"\n  deleteAlbums(filter: AlbumsListFilter!): Boolean\n  \"\"\"Delete a single Artist.\"\"\"\n  deleteArtist(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Artists with a filter.\"\"\"\n  deleteArtists(filter: ArtistsListFilter!): Boolean\n  \"\"\"Delete a single Customer.\"\"\"\n  deleteCustomer(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Customers with a filter.\"\"\"\n  deleteCustomers(filter: CustomersListFilter!): Boolean\n  \"\"\"Delete a single Employee.\"\"\"\n  deleteEmployee(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Employees with a filter.\"\"\"\n  deleteEmployees(filter: EmployeesListFilter!): Boolean\n  \"\"\"Delete a single Genre.\"\"\"\n  deleteGenre(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Genres with a filter.\"\"\"\n  deleteGenres(filter: GenresListFilter!): Boolean\n  \"\"\"Delete a single Invoice.\"\"\"\n  deleteInvoice(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete a single InvoiceLine.\"\"\"\n  deleteInvoiceLine(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many InvoiceLines with a filter.\"\"\"\n  deleteInvoiceLines(filter: InvoiceLinesListFilter!): Boolean\n  \"\"\"Delete many Invoices with a filter.\"\"\"\n  deleteInvoices(filter: InvoicesListFilter!): Boolean\n  \"\"\"Delete a single MediaType.\"\"\"\n  deleteMediaType(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many MediaTypes with a filter.\"\"\"\n  deleteMediaTypes(filter: MediaTypesListFilter!): Boolean\n  \"\"\"Delete a single Playlist.\"\"\"\n  deletePlaylist(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Playlists with a filter.\"\"\"\n  deletePlaylists(filter: PlaylistsListFilter!): Boolean\n  \"\"\"Delete a single Track.\"\"\"\n  deleteTrack(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Tracks with a filter.\"\"\"\n  deleteTracks(filter: TracksListFilter!): Boolean\n  \"\"\"Update a single Album.\"\"\"\n  updateAlbum(input: AlbumUpdateInput!): Album\n  \"\"\"Update many Albums.\"\"\"\n  updateAlbums(input: [AlbumUpdateInput!]!): [Album]\n  \"\"\"Update a single Artist.\"\"\"\n  updateArtist(input: ArtistUpdateInput!): Artist\n  \"\"\"Update many Artists.\"\"\"\n  updateArtists(input: [ArtistUpdateInput!]!): [Artist]\n  \"\"\"Update a single Customer.\"\"\"\n  updateCustomer(input: CustomerUpdateInput!): Customer\n  \"\"\"Update many Customers.\"\"\"\n  updateCustomers(input: [CustomerUpdateInput!]!): [Customer]\n  \"\"\"Update a single Employee.\"\"\"\n  updateEmployee(input: EmployeeUpdateInput!): Employee\n  \"\"\"Update many Employees.\"\"\"\n  updateEmployees(input: [EmployeeUpdateInput!]!): [Employee]\n  \"\"\"Update a single Genre.\"\"\"\n  updateGenre(input: GenreUpdateInput!): Genre\n  \"\"\"Update many Genres.\"\"\"\n  updateGenres(input: [GenreUpdateInput!]!): [Genre]\n  \"\"\"Update a single Invoice.\"\"\"\n  updateInvoice(input: InvoiceUpdateInput!): Invoice\n  \"\"\"Update a single InvoiceLine.\"\"\"\n  updateInvoiceLine(input: InvoiceLineUpdateInput!): InvoiceLine\n  \"\"\"Update many InvoiceLines.\"\"\"\n  updateInvoiceLines(input: [InvoiceLineUpdateInput!]!): [InvoiceLine]\n  \"\"\"Update many Invoices.\"\"\"\n  updateInvoices(input: [InvoiceUpdateInput!]!): [Invoice]\n  \"\"\"Update a single MediaType.\"\"\"\n  updateMediaType(input: MediaTypeUpdateInput!): MediaType\n  \"\"\"Update many MediaTypes.\"\"\"\n  updateMediaTypes(input: [MediaTypeUpdateInput!]!): [MediaType]\n  \"\"\"Update a single Playlist.\"\"\"\n  updatePlaylist(input: PlaylistUpdateInput!): Playlist\n  \"\"\"Update many Playlists.\"\"\"\n  updatePlaylists(input: [PlaylistUpdateInput!]!): [Playlist]\n  \"\"\"Update a single Track.\"\"\"\n  updateTrack(input: TrackUpdateInput!): Track\n  \"\"\"Update many Tracks.\"\"\"\n  updateTracks(input: [TrackUpdateInput!]!): [Track]\n}\n\ntype Playlist @key(fields: \"playlistId\") {\n  name: String\n  playlistId: ID!\n  tracks(filter: TracksListFilter): [Track!]!\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\n\"\"\"\nData needed to create or update Playlists. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput PlaylistCreateOrUpdateInput {\n  name: String\n  playlistId: ID\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to create Playlists.\"\"\"\ninput PlaylistInsertInput {\n  name: String\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\n\"\"\"Data needed to update Playlists. An ID must be passed.\"\"\"\ninput PlaylistUpdateInput {\n  name: String\n  playlistId: ID!\n  tracks: [TrackCreateOrUpdateInput!]\n}\n\ninput PlaylistsListFilter {\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n  playlistId: ID\n  playlistId_gt: ID\n  playlistId_gte: ID\n  playlistId_in: [ID!]\n  playlistId_lt: ID\n  playlistId_lte: ID\n  playlistId_ne: ID\n  playlistId_nin: [ID!]\n  playlistId_notnull: Boolean\n  playlistId_null: Boolean\n  tracks: TracksListFilter\n}\n\ninput PlaylistsOrderByInput {\n  name: Sort\n  playlistId: Sort\n}\n\n\"\"\"Pagination options for Playlists.\"\"\"\ninput PlaylistsPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: PlaylistsOrderByInput\n}\n\ntype Query {\n  \"\"\"Get a single Album.\"\"\"\n  album(id: ID!): Album\n  \"\"\"Get multiple Albums.\"\"\"\n  albums(filter: AlbumsListFilter, pagination: AlbumsPaginationInput): [Album]\n  \"\"\"Get aggregated data for Albums.\"\"\"\n  albums_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Artist.\"\"\"\n  artist(id: ID!): Artist\n  \"\"\"Get multiple Artists.\"\"\"\n  artists(filter: ArtistsListFilter, pagination: ArtistsPaginationInput): [Artist]\n  \"\"\"Get aggregated data for Artists.\"\"\"\n  artists_aggregate(filter: ArtistsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Customer.\"\"\"\n  customer(id: ID!): Customer\n  \"\"\"Get multiple Customers.\"\"\"\n  customers(filter: CustomersListFilter, pagination: CustomersPaginationInput): [Customer]\n  \"\"\"Get aggregated data for Customers.\"\"\"\n  customers_aggregate(filter: CustomersListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Employee.\"\"\"\n  employee(id: ID!): Employee\n  \"\"\"Get multiple Employees.\"\"\"\n  employees(filter: EmployeesListFilter, pagination: EmployeesPaginationInput): [Employee]\n  \"\"\"Get aggregated data for Employees.\"\"\"\n  employees_aggregate(filter: EmployeesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Genre.\"\"\"\n  genre(id: ID!): Genre\n  \"\"\"Get multiple Genres.\"\"\"\n  genres(filter: GenresListFilter, pagination: GenresPaginationInput): [Genre]\n  \"\"\"Get aggregated data for Genres.\"\"\"\n  genres_aggregate(filter: GenresListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Invoice.\"\"\"\n  invoice(id: ID!): Invoice\n  \"\"\"Get a single InvoiceLine.\"\"\"\n  invoiceLine(id: ID!): InvoiceLine\n  \"\"\"Get multiple InvoiceLines.\"\"\"\n  invoiceLines(filter: InvoiceLinesListFilter, pagination: InvoiceLinesPaginationInput): [InvoiceLine]\n  \"\"\"Get aggregated data for InvoiceLines.\"\"\"\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get multiple Invoices.\"\"\"\n  invoices(filter: InvoicesListFilter, pagination: InvoicesPaginationInput): [Invoice]\n  \"\"\"Get aggregated data for Invoices.\"\"\"\n  invoices_aggregate(filter: InvoicesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single MediaType.\"\"\"\n  mediaType(id: ID!): MediaType\n  \"\"\"Get multiple MediaTypes.\"\"\"\n  mediaTypes(filter: MediaTypesListFilter, pagination: MediaTypesPaginationInput): [MediaType]\n  \"\"\"Get aggregated data for MediaTypes.\"\"\"\n  mediaTypes_aggregate(filter: MediaTypesListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Playlist.\"\"\"\n  playlist(id: ID!): Playlist\n  \"\"\"Get multiple Playlists.\"\"\"\n  playlists(filter: PlaylistsListFilter, pagination: PlaylistsPaginationInput): [Playlist]\n  \"\"\"Get aggregated data for Playlists.\"\"\"\n  playlists_aggregate(filter: PlaylistsListFilter): AggregationResultFromMusicSubgraph\n  \"\"\"Get a single Track.\"\"\"\n  track(id: ID!): Track\n  \"\"\"Get multiple Tracks.\"\"\"\n  tracks(filter: TracksListFilter, pagination: TracksPaginationInput): [Track]\n  \"\"\"Get aggregated data for Tracks.\"\"\"\n  tracks_aggregate(filter: TracksListFilter): AggregationResultFromMusicSubgraph\n}\n\nenum Sort {\n  ASC\n  DESC\n}\n\ntype Track @key(fields: \"trackId\") {\n  album(filter: AlbumsListFilter): Album\n  album_aggregate(filter: AlbumsListFilter): AggregationResultFromMusicSubgraph\n  bytes: Float\n  composer: String\n  genre(filter: GenresListFilter): Genre\n  genre_aggregate(filter: GenresListFilter): AggregationResultFromMusicSubgraph\n  invoiceLines(filter: InvoiceLinesListFilter): [InvoiceLine!]!\n  invoiceLines_aggregate(filter: InvoiceLinesListFilter): AggregationResultFromMusicSubgraph\n  mediaType(filter: MediaTypesListFilter): MediaType!\n  mediaType_aggregate(filter: MediaTypesListFilter): AggregationResultFromMusicSubgraph\n  milliseconds: Float!\n  name: String!\n  playlists(filter: PlaylistsListFilter): [Playlist!]!\n  playlists_aggregate(filter: PlaylistsListFilter): AggregationResultFromMusicSubgraph\n  trackId: ID!\n  unitPrice: String!\n}\n\n\"\"\"\nData needed to create or update Tracks. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput TrackCreateOrUpdateInput {\n  album: AlbumCreateOrUpdateInput\n  bytes: Float\n  composer: String\n  genre: GenreCreateOrUpdateInput\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  mediaType: MediaTypeCreateOrUpdateInput\n  milliseconds: Float\n  name: String\n  playlists: [PlaylistCreateOrUpdateInput!]\n  trackId: ID\n  unitPrice: String\n}\n\n\"\"\"Data needed to create Tracks.\"\"\"\ninput TrackInsertInput {\n  album: AlbumCreateOrUpdateInput\n  bytes: Float\n  composer: String\n  genre: GenreCreateOrUpdateInput\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  mediaType: MediaTypeCreateOrUpdateInput\n  milliseconds: Float!\n  name: String!\n  playlists: [PlaylistCreateOrUpdateInput!]\n  unitPrice: String!\n}\n\n\"\"\"Data needed to update Tracks. An ID must be passed.\"\"\"\ninput TrackUpdateInput {\n  album: AlbumCreateOrUpdateInput\n  bytes: Float\n  composer: String\n  genre: GenreCreateOrUpdateInput\n  invoiceLines: [InvoiceLineCreateOrUpdateInput!]\n  mediaType: MediaTypeCreateOrUpdateInput\n  milliseconds: Float\n  name: String\n  playlists: [PlaylistCreateOrUpdateInput!]\n  trackId: ID!\n  unitPrice: String\n}\n\ninput TracksListFilter {\n  album: AlbumsListFilter\n  bytes: Float\n  bytes_in: [Float!]\n  bytes_ne: Float\n  bytes_nin: [Float!]\n  bytes_notnull: Boolean\n  bytes_null: Boolean\n  composer: String\n  composer_gt: String\n  composer_gte: String\n  composer_ilike: String\n  composer_in: [String!]\n  composer_like: String\n  composer_lt: String\n  composer_lte: String\n  composer_ne: String\n  composer_nin: [String!]\n  composer_notnull: Boolean\n  composer_null: Boolean\n  genre: GenresListFilter\n  invoiceLines: InvoiceLinesListFilter\n  mediaType: MediaTypesListFilter\n  milliseconds: Float\n  milliseconds_in: [Float!]\n  milliseconds_ne: Float\n  milliseconds_nin: [Float!]\n  milliseconds_notnull: Boolean\n  milliseconds_null: Boolean\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n  playlists: PlaylistsListFilter\n  trackId: ID\n  trackId_gt: ID\n  trackId_gte: ID\n  trackId_in: [ID!]\n  trackId_lt: ID\n  trackId_lte: ID\n  trackId_ne: ID\n  trackId_nin: [ID!]\n  trackId_notnull: Boolean\n  trackId_null: Boolean\n  unitPrice: String\n  unitPrice_gt: String\n  unitPrice_gte: String\n  unitPrice_ilike: String\n  unitPrice_in: [String!]\n  unitPrice_like: String\n  unitPrice_lt: String\n  unitPrice_lte: String\n  unitPrice_ne: String\n  unitPrice_nin: [String!]\n  unitPrice_notnull: Boolean\n  unitPrice_null: Boolean\n}\n\ninput TracksOrderByInput {\n  bytes: Sort\n  composer: Sort\n  milliseconds: Sort\n  name: Sort\n  trackId: Sort\n  unitPrice: Sort\n}\n\n\"\"\"Pagination options for Tracks.\"\"\"\ninput TracksPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: TracksOrderByInput\n}\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  EXECUTION\n  SECURITY\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope","16508bb3ec3f2ccfc6a52c39ef33cf705e5d7460":"schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@composeDirective\", \"@extends\", \"@external\", \"@inaccessible\", \"@interfaceObject\", \"@key\", \"@override\", \"@provides\", \"@requires\", \"@shareable\", \"@tag\"]) {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nenum AdminUiFilterType {\n  BOOLEAN\n  DATE_RANGE\n  ENUM\n  NUMERIC\n  RELATIONSHIP\n  TEXT\n}\n\ntype Agent @key(fields: \"id\") {\n  birthYear: String\n  gender: String\n  height: String\n  id: ID!\n  name: String!\n}\n\n\"\"\"\nData needed to create or update Agents. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput AgentCreateOrUpdateInput {\n  birthYear: String\n  gender: String\n  height: String\n  id: ID\n  name: String\n}\n\n\"\"\"Data needed to create Agents.\"\"\"\ninput AgentInsertInput {\n  birthYear: String\n  gender: String\n  height: String\n  name: String!\n}\n\n\"\"\"Data needed to update Agents. An ID must be passed.\"\"\"\ninput AgentUpdateInput {\n  birthYear: String\n  gender: String\n  height: String\n  id: ID!\n  name: String\n}\n\ninput AgentsListFilter {\n  birthYear: String\n  birthYear_gt: String\n  birthYear_gte: String\n  birthYear_ilike: String\n  birthYear_in: [String!]\n  birthYear_like: String\n  birthYear_lt: String\n  birthYear_lte: String\n  birthYear_ne: String\n  birthYear_nin: [String!]\n  birthYear_notnull: Boolean\n  birthYear_null: Boolean\n  gender: String\n  gender_gt: String\n  gender_gte: String\n  gender_ilike: String\n  gender_in: [String!]\n  gender_like: String\n  gender_lt: String\n  gender_lte: String\n  gender_ne: String\n  gender_nin: [String!]\n  gender_notnull: Boolean\n  gender_null: Boolean\n  height: String\n  height_gt: String\n  height_gte: String\n  height_ilike: String\n  height_in: [String!]\n  height_like: String\n  height_lt: String\n  height_lte: String\n  height_ne: String\n  height_nin: [String!]\n  height_notnull: Boolean\n  height_null: Boolean\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_ne: ID\n  id_nin: [ID!]\n  id_notnull: Boolean\n  id_null: Boolean\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n}\n\ninput AgentsOrderByInput {\n  birthYear: Sort\n  gender: Sort\n  height: Sort\n  id: Sort\n  name: Sort\n}\n\n\"\"\"Pagination options for Agents.\"\"\"\ninput AgentsPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: AgentsOrderByInput\n}\n\ntype AggregationResultFromPaymentsSubgraph {\n  count: Int!\n}\n\nenum AggregationType {\n  COUNT\n}\n\ninput DeleteOneFilterInput {\n  id: ID!\n}\n\ntype Invoice @key(fields: \"invoiceId\", resolvable: false) {\n  invoiceId: ID!\n}\n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON @specifiedBy(url: \"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\")\n\ntype Mutation {\n  \"\"\"Create a single Agent.\"\"\"\n  createAgent(input: AgentInsertInput!): Agent\n  \"\"\"Create many Agents.\"\"\"\n  createAgents(input: [AgentInsertInput!]!): [Agent]\n  \"\"\"Create or update many Agents.\"\"\"\n  createOrUpdateAgents(input: [AgentCreateOrUpdateInput!]!): [Agent]\n  \"\"\"Create or update many Payments.\"\"\"\n  createOrUpdatePayments(input: [PaymentCreateOrUpdateInput!]!): [Payment]\n  \"\"\"Create a single Payment.\"\"\"\n  createPayment(input: PaymentInsertInput!): Payment\n  \"\"\"Create many Payments.\"\"\"\n  createPayments(input: [PaymentInsertInput!]!): [Payment]\n  \"\"\"Delete a single Agent.\"\"\"\n  deleteAgent(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Agents with a filter.\"\"\"\n  deleteAgents(filter: AgentsListFilter!): Boolean\n  \"\"\"Delete a single Payment.\"\"\"\n  deletePayment(filter: DeleteOneFilterInput!): Boolean\n  \"\"\"Delete many Payments with a filter.\"\"\"\n  deletePayments(filter: PaymentsListFilter!): Boolean\n  \"\"\"Update a single Agent.\"\"\"\n  updateAgent(input: AgentUpdateInput!): Agent\n  \"\"\"Update many Agents.\"\"\"\n  updateAgents(input: [AgentUpdateInput!]!): [Agent]\n  \"\"\"Update a single Payment.\"\"\"\n  updatePayment(input: PaymentUpdateInput!): Payment\n  \"\"\"Update many Payments.\"\"\"\n  updatePayments(input: [PaymentUpdateInput!]!): [Payment]\n}\n\n\"\"\"A duration in nanoseconds\"\"\"\nscalar NanoDuration\n\n\"\"\"A timestamp in nanoseconds\"\"\"\nscalar NanoTimestamp\n\ntype Payment @key(fields: \"id\") {\n  agentId: ID!\n  amount: String!\n  id: ID!\n  invoice: Invoice!\n  invoiceId: ID!\n  notes: String\n  owner: Agent!\n  paymentMethod: String!\n  reconciled: Boolean!\n}\n\n\"\"\"\nData needed to create or update Payments. If an ID is passed, this is an update, otherwise it's an insert.\n\"\"\"\ninput PaymentCreateOrUpdateInput {\n  agentId: ID\n  amount: String\n  id: ID\n  invoiceId: ID\n  notes: String\n  owner: AgentCreateOrUpdateInput\n  paymentMethod: String\n  reconciled: Boolean\n}\n\n\"\"\"Data needed to create Payments.\"\"\"\ninput PaymentInsertInput {\n  agentId: ID!\n  amount: String!\n  invoiceId: ID!\n  notes: String\n  owner: AgentCreateOrUpdateInput\n  paymentMethod: String!\n  reconciled: Boolean!\n}\n\n\"\"\"Data needed to update Payments. An ID must be passed.\"\"\"\ninput PaymentUpdateInput {\n  agentId: ID\n  amount: String\n  id: ID!\n  invoiceId: ID\n  notes: String\n  owner: AgentCreateOrUpdateInput\n  paymentMethod: String\n  reconciled: Boolean\n}\n\ninput PaymentsListFilter {\n  agentId: ID\n  agentId_gt: ID\n  agentId_gte: ID\n  agentId_in: [ID!]\n  agentId_lt: ID\n  agentId_lte: ID\n  agentId_ne: ID\n  agentId_nin: [ID!]\n  agentId_notnull: Boolean\n  agentId_null: Boolean\n  amount: String\n  amount_gt: String\n  amount_gte: String\n  amount_ilike: String\n  amount_in: [String!]\n  amount_like: String\n  amount_lt: String\n  amount_lte: String\n  amount_ne: String\n  amount_nin: [String!]\n  amount_notnull: Boolean\n  amount_null: Boolean\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_ne: ID\n  id_nin: [ID!]\n  id_notnull: Boolean\n  id_null: Boolean\n  invoiceId: ID\n  invoiceId_gt: ID\n  invoiceId_gte: ID\n  invoiceId_in: [ID!]\n  invoiceId_lt: ID\n  invoiceId_lte: ID\n  invoiceId_ne: ID\n  invoiceId_nin: [ID!]\n  invoiceId_notnull: Boolean\n  invoiceId_null: Boolean\n  notes: String\n  notes_gt: String\n  notes_gte: String\n  notes_ilike: String\n  notes_in: [String!]\n  notes_like: String\n  notes_lt: String\n  notes_lte: String\n  notes_ne: String\n  notes_nin: [String!]\n  notes_notnull: Boolean\n  notes_null: Boolean\n  owner: AgentsListFilter\n  paymentMethod: String\n  paymentMethod_gt: String\n  paymentMethod_gte: String\n  paymentMethod_ilike: String\n  paymentMethod_in: [String!]\n  paymentMethod_like: String\n  paymentMethod_lt: String\n  paymentMethod_lte: String\n  paymentMethod_ne: String\n  paymentMethod_nin: [String!]\n  paymentMethod_notnull: Boolean\n  paymentMethod_null: Boolean\n  reconciled: Boolean\n  reconciled_in: [Boolean!]\n  reconciled_ne: Boolean\n  reconciled_nin: [Boolean!]\n  reconciled_notnull: Boolean\n  reconciled_null: Boolean\n}\n\ninput PaymentsOrderByInput {\n  agentId: Sort\n  amount: Sort\n  id: Sort\n  invoiceId: Sort\n  notes: Sort\n  paymentMethod: Sort\n  reconciled: Sort\n}\n\n\"\"\"Pagination options for Payments.\"\"\"\ninput PaymentsPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: PaymentsOrderByInput\n}\n\ntype Query {\n  \"\"\"Get a single Agent.\"\"\"\n  agent(id: ID!): Agent\n  \"\"\"Get multiple Agents.\"\"\"\n  agents(filter: AgentsListFilter, pagination: AgentsPaginationInput): [Agent]\n  \"\"\"Get a single Payment.\"\"\"\n  payment(id: ID!): Payment\n  \"\"\"Get multiple Payments.\"\"\"\n  payments(filter: PaymentsListFilter, pagination: PaymentsPaginationInput): [Payment]\n  \"\"\"Get aggregated data for Payments.\"\"\"\n  payments_aggregate(filter: PaymentsListFilter): AggregationResultFromPaymentsSubgraph\n  \"\"\"Get a single Trace.\"\"\"\n  trace(id: ID!): Trace\n  \"\"\"Get multiple Traces.\"\"\"\n  traces(filter: TracesListFilter, pagination: TracesPaginationInput): [Trace]\n  \"\"\"Get aggregated data for Traces.\"\"\"\n  traces_aggregate(filter: TracesListFilter): AggregationResultFromPaymentsSubgraph\n}\n\nenum Sort {\n  ASC\n  DESC\n}\n\ntype Trace @key(fields: \"id\") {\n  attributes: JSON!\n  duration: NanoDuration!\n  id: ID!\n  name: String!\n  parentId: String\n  spanId: String!\n  timestamp: NanoTimestamp!\n  traceId: String!\n}\n\ninput TracesListFilter {\n  attributes: JSON\n  attributes_in: [JSON!]\n  attributes_ne: JSON\n  attributes_nin: [JSON!]\n  attributes_notnull: Boolean\n  attributes_null: Boolean\n  duration: NanoDuration\n  duration_gt: NanoDuration\n  duration_gte: NanoDuration\n  duration_in: [NanoDuration!]\n  duration_lt: NanoDuration\n  duration_lte: NanoDuration\n  duration_ne: NanoDuration\n  duration_nin: [NanoDuration!]\n  duration_notnull: Boolean\n  duration_null: Boolean\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_ne: ID\n  id_nin: [ID!]\n  id_notnull: Boolean\n  id_null: Boolean\n  name: String\n  name_gt: String\n  name_gte: String\n  name_ilike: String\n  name_in: [String!]\n  name_like: String\n  name_lt: String\n  name_lte: String\n  name_ne: String\n  name_nin: [String!]\n  name_notnull: Boolean\n  name_null: Boolean\n  parentId: String\n  parentId_gt: String\n  parentId_gte: String\n  parentId_ilike: String\n  parentId_in: [String!]\n  parentId_like: String\n  parentId_lt: String\n  parentId_lte: String\n  parentId_ne: String\n  parentId_nin: [String!]\n  parentId_notnull: Boolean\n  parentId_null: Boolean\n  spanId: String\n  spanId_gt: String\n  spanId_gte: String\n  spanId_ilike: String\n  spanId_in: [String!]\n  spanId_like: String\n  spanId_lt: String\n  spanId_lte: String\n  spanId_ne: String\n  spanId_nin: [String!]\n  spanId_notnull: Boolean\n  spanId_null: Boolean\n  timestamp: NanoTimestamp\n  timestamp_gt: NanoTimestamp\n  timestamp_gte: NanoTimestamp\n  timestamp_in: [NanoTimestamp!]\n  timestamp_lt: NanoTimestamp\n  timestamp_lte: NanoTimestamp\n  timestamp_ne: NanoTimestamp\n  timestamp_nin: [NanoTimestamp!]\n  timestamp_notnull: Boolean\n  timestamp_null: Boolean\n  traceId: String\n  traceId_gt: String\n  traceId_gte: String\n  traceId_ilike: String\n  traceId_in: [String!]\n  traceId_like: String\n  traceId_lt: String\n  traceId_lte: String\n  traceId_ne: String\n  traceId_nin: [String!]\n  traceId_notnull: Boolean\n  traceId_null: Boolean\n}\n\ninput TracesOrderByInput {\n  attributes: Sort\n  duration: Sort\n  id: Sort\n  name: Sort\n  parentId: Sort\n  spanId: Sort\n  timestamp: Sort\n  traceId: Sort\n}\n\n\"\"\"Pagination options for Traces.\"\"\"\ninput TracesPaginationInput {\n  limit: Int\n  offset: Int\n  orderBy: TracesOrderByInput\n}\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  EXECUTION\n  SECURITY\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope"}},"subgraphs":[{"id":"0","name":"music","routingUrl":"http://localhost:9001"},{"id":"1","name":"payments","routingUrl":"http://localhost:12346"}]}